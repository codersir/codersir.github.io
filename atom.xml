<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coder Sir</title>
  <subtitle>Yes! Coder sir.</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://codersir.github.io/"/>
  <updated>2016-07-10T16:02:27.000Z</updated>
  <id>http://codersir.github.io/</id>
  
  <author>
    <name>xuhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redux 生态系统</title>
    <link href="http://codersir.github.io/2016/07/06/redux-ecosystem/"/>
    <id>http://codersir.github.io/2016/07/06/redux-ecosystem/</id>
    <published>2016-07-05T17:35:39.000Z</published>
    <updated>2016-07-10T16:02:27.000Z</updated>
    
    <content type="html">&lt;p&gt;在学习 React 的过程中，我们了解到 React 组件其实是&lt;a href=&quot;https://github.com/nixzhu/dev-blog/blob/master/2015-04-23-state-machine.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;状态机&lt;/a&gt;，那么，随着应用庞大组件多起来，就不可避免的会面临状态管理的问题。最初，facebook 官方推荐的状态管理方案是 &lt;a href=&quot;https://facebook.github.io/flux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux&lt;/a&gt;，开源社区也产生了许多基于 Flux 的变种，比如 ，相较 Flux 都有所改进，但和官方背景顶多能达到分庭抗礼，却无法一统江湖。直到 Redux 横空出世，以更简洁直接的方案和对中间件的支持，在社区中迅速获得大量的拥趸，现在几乎已经成了 React 应用的标配。由于对中间件的支持，开源社区产出了许多优秀的 Redux 中间件，比如 redux-logger, redux-undo, redux-thunk 等，慢慢的形成了一个完善的生态系统。官方文档页面也有一个 &lt;a href=&quot;http://redux.js.org/docs/introduction/Ecosystem.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ecosystem&lt;/a&gt; 页面，列出了各种 Reudx 相关的中间件、组件和小工具等，本文主要介绍我日常开发中用到并且深入学习了的中间件，并结合源码解释其工作原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你还不了解 Redux，可以看我写的「&lt;a href=&quot;/2016/01/25/dive-into-redux/&quot;&gt;深入学习 Redux&lt;/a&gt;」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Redux-中间件&quot;&gt;&lt;a href=&quot;#Redux-中间件&quot; class=&quot;headerlink&quot; title=&quot;Redux 中间件&quot;&gt;&lt;/a&gt;Redux 中间件&lt;/h2&gt;&lt;p&gt;如果你了解 express 或 koa，那么你应该对中间件的概念很熟悉了，这些框架的中间件作用在接到请求和返回响应之间，进行 log 日志、添加 CORS 头等任务，中间件的最大特点就是它们可以链式组合。 Redux 中间件虽然处理的问题不一样，但是它们概念上是相似的。Redux 中间件&lt;strong&gt;作用在分发 action 和被 reducer 处理之间&lt;/strong&gt;。官方文档对 &lt;a href=&quot;http://redux.js.org/docs/advanced/Middleware.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux middleware&lt;/a&gt; 有一个很好的介绍，通过一步步改进一个 logger 中间件让你理解中间件的机制，推荐查看。以文档 logger 中间件为例，展示一个标准 Redux 中间件的写法：&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; logger = store =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt; =&amp;gt; action =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;dispatching&#39;&lt;/span&gt;, action)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  let result = &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;(action)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;next state&#39;&lt;/span&gt;, store.getState())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Redux 中间件接受 store 作为参数，并返回一个新的函数，这个函数会成为 Redux 中间件链上的一环，当调用 dispatch 函数的时候，会依次穿过所有的中间件。&lt;/p&gt;
&lt;h2 id=&quot;react-redux&quot;&gt;&lt;a href=&quot;#react-redux&quot; class=&quot;headerlink&quot; title=&quot;react-redux&quot;&gt;&lt;/a&gt;react-redux&lt;/h2&gt;&lt;p&gt;Redux 是一种状态管理方案，虽然主要在 React 社区大放异彩，但是它并不限于和 React 一起使用。如果结合 React 使用，则最好配合这个包一起用，这个包提供两个 API，&lt;code&gt;Provider&lt;/code&gt; 组件和 &lt;code&gt;connect()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;br&gt;&lt;code&gt;Provider&lt;/code&gt; 组件的作用是挂载 store 到全局，使得每个组件都可以方便的获取 &lt;code&gt;store&lt;/code&gt;。它的实现很简单，就是把 &lt;code&gt;Provider&lt;/code&gt; 组件作为根组件，通过 React &lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;context&lt;/a&gt; 机制，挂载 &lt;code&gt;store&lt;/code&gt; 到所有子组件 context 的上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect&lt;/code&gt;&lt;br&gt;&lt;code&gt;connect&lt;/code&gt; 函数的作用是关联 store 到 React 组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;redux-actions&quot;&gt;&lt;a href=&quot;#redux-actions&quot; class=&quot;headerlink&quot; title=&quot;redux-actions&quot;&gt;&lt;/a&gt;redux-actions&lt;/h2&gt;&lt;p&gt;action 是描述发生了什么的对象，它是 Redux 中最简单的概念。对 action 对象只有一个限制，那就是包含一个合适的 &lt;code&gt;type&lt;/code&gt; 字段，所以大家可能写出各种各样的 action。宽松对个人是一种自由，但是对团队则会造成混乱，产生不必要的沟通成本。所以 action 需要一个规范，社区用的最多的是 &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FSA&lt;/a&gt;。redux-actions 就是用来创建符合 FSA 规范的 actions，同时提供工具函数方便处理 actions。它有下面三个 API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createAction(type, payloadCreator = Identity, ?metaCreator)&lt;/code&gt;&lt;br&gt;其实这个函数名叫&lt;code&gt;createActionCreator&lt;/code&gt; 更合理，它将会返回一个 action creator 函数，creator 函数的返回值是一个符合 FSA 标准的 action，但是也有自己的扩展，也就是 &lt;code&gt;meta&lt;/code&gt;，结构如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  payload, &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  error?: &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  meta?: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;handleAction(type, reducer | reducerMap, ?defaultState)&lt;/code&gt;&lt;br&gt;这个函数包装 reducer 让它只处理特定类型的 FSA。第二个参数可以是 reducer 函数或者是 reducer 对象，如果是对象，要采用下面的格式（灵感来自 generator）：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  next(state, action)&lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  throw(state, action)&lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;handleActions(reducerMap, ?defaultState)&lt;/code&gt;&lt;br&gt;这个函数通过 &lt;code&gt;handleAction&lt;/code&gt; 创建多个 reducers，并且把它们组合成一个可以处理多个 actions 的单一 reducer，合并 reducers 调用的是下面这个函数：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduceReducers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;rest_arg&quot;&gt;...reducers&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 改成 `return (defaultState, action)` 更好理解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (previous, current) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reducers.reduce(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (p, r) =&amp;gt; r(p, current),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      previous&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数返回函数的参数名让人容易误解，把它改成 &lt;code&gt;(defaultState, action)&lt;/code&gt; 就容易理解了，举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; reducersMap = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ADD_TODO&lt;/span&gt;: (state, action) =&amp;gt; &lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TOGGLE_TODO&lt;/span&gt;: (state, action) =&amp;gt; &lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; reducer = handleActions(reducersMap, &amp;#123;todos: []&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 最后返回的 reducer 为：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（defaultState, action) =&amp;gt; reducersMap[&#39;&lt;span class=&quot;type&quot;&gt;TOGGLE_TODO&lt;/span&gt;&#39;](reducersMap[&#39;&lt;span class=&quot;type&quot;&gt;ADD_TODO&lt;/span&gt;&#39;](defaultState, action), action)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;redux-logger&quot;&gt;&lt;a href=&quot;#redux-logger&quot; class=&quot;headerlink&quot; title=&quot;redux-logger&quot;&gt;&lt;/a&gt;redux-logger&lt;/h2&gt;&lt;p&gt;官方文档的 logger 示例还是太简单了，有时候我们需要更详细的日志信息，比如 action 的具体信息、触发的时间、异步 action 的耗时、state 的具体变化等，甚至 log 的级别和颜色、格式化 log 信息，这些 &lt;a href=&quot;https://github.com/evgenyrodionov/redux-logger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-logger&lt;/a&gt; 都很贴心的提供了。logger 中间件很简单，API 可以去 github 查看，使用时需要注意的就是&lt;strong&gt; Logger 只能是最后一个中间件&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;redux-thunk&quot;&gt;&lt;a href=&quot;#redux-thunk&quot; class=&quot;headerlink&quot; title=&quot;redux-thunk&quot;&gt;&lt;/a&gt;redux-thunk&lt;/h2&gt;&lt;p&gt;通常说 &lt;a href=&quot;https://en.wikipedia.org/wiki/Thunk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;thunk&lt;/a&gt; 函数是指通过包裹表达式使之延迟执行的函数，以达到“传名调用”提高性能的效果。JS 是“传值调用”的语言，它的 thunk 函数其实是指“部分函数”（或者说部分柯里化），把一个多参数函数变成一个单参数函数，而且参数为回调函数。redux-thunk 允许 action creator 返回一个函数而不是 action，它的功能就是使 dispatch action 延迟执行。它源码是最简单的，只有区区十几行:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createThunkMiddleware&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(extraArgument)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&amp;#123; dispatch, getState &amp;#125;) =&amp;gt; next =&amp;gt; action =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof action === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; action(dispatch, getState, extraArgument);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(action);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; thunk = createThunkMiddleware();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thunk.withExtraArgument = createThunkMiddleware;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; thunk;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;源码也很容易理解，如果 action 是一个函数，那么就传入一些参数调用它，否则就不进行任何操作直接传给下一个中间件。 &lt;a href=&quot;https://github.com/gaearon/redux-thunk#composition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; 上有个详细的例子，用来解释 redux-thunk 是如何优化异步流程控制的。&lt;/p&gt;
&lt;h2 id=&quot;redux-saga&quot;&gt;&lt;a href=&quot;#redux-saga&quot; class=&quot;headerlink&quot; title=&quot;redux-saga&quot;&gt;&lt;/a&gt;redux-saga&lt;/h2&gt;&lt;p&gt;当看到 redux-thunk 的时候，心里就想着那么是否有 「redux-co」 呢？同样是异步流程控制，NodeJS 中有 &lt;a href=&quot;https://github.com/thunks/thunks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;thunks&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/tj/co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;co&lt;/a&gt;，分别代表基于 callback 和基于 generator 的的异步流程控制。后来发现还真有，那就是 &lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-saga&lt;/a&gt;。虽然官方文档主推 redux-thunk，但是 redux-saga 凭借自身机制的优势，已经超越 redux-thunk 获得了更大的关注，成为事实的标准，算是另一个社区产出超越官方主推的例子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你还不了解 co， 可以看我写的 「&lt;a href=&quot;/2016/06/17/dive-into-koa/&quot;&gt;Koa 是怎么让你爽的？&lt;/a&gt;」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和 co 一样，redux-saga 也是基于 generator 的。redux-saga 是测试驱动的典型，它提供了许多 effect 构造器，用来处理异步操作的同时保持代码的可测试性。redux-saga 比较复杂，详细介绍和 API 可以查看&lt;a href=&quot;https://yelouafi.github.io/redux-saga&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;，后面也许会单独写一篇博客分析它的工作原理。&lt;/p&gt;
&lt;h2 id=&quot;reselect&quot;&gt;&lt;a href=&quot;#reselect&quot; class=&quot;headerlink&quot; title=&quot;reselect&quot;&gt;&lt;/a&gt;reselect&lt;/h2&gt;&lt;p&gt;学习这些组件的过程中，最让我开心的是 &lt;strong&gt;看到思想的闪光&lt;/strong&gt;，以及大家对这些想法的热情。很多组件实现其实都很简单，短短几十行或上百行代码，但却能完美的达到某一目的。比如 reselect，只有几十行代码，实现功能也非常简单，通过记忆函数来优化 React 性能，收获了 3000 多的 star，前端组件生态终于开始有点 NodeJS package 的感觉了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在学习 React 的过程中，我们了解到 React 组件其实是&lt;a href=&quot;https://github.com/nixzhu/dev-blog/blob/master/2015-04-23-state-machine.md&quot;&gt;状态机&lt;/a&gt;，那么，随着应用庞大组件多起来，就不可避免的会面临状态管理的问题。最初，facebook 官方推荐的状态管理方案是 &lt;a href=&quot;https://facebook.github.io/flux&quot;&gt;Flux&lt;/a&gt;，开源社区也产生了许多基于 Flux 的变种，比如 ，相较 Flux 都有所改进，但和官方背景顶多能达到分庭抗礼，却无法一统江湖。直到 Redux 横空出世，以更简洁直接的方案和对中间件的支持，在社区中迅速获得大量的拥趸，现在几乎已经成了 React 应用的标配。由于对中间件的支持，开源社区产出了许多优秀的 Redux 中间件，比如 redux-logger, redux-undo, redux-thunk 等，慢慢的形成了一个完善的生态系统。官方文档页面也有一个 &lt;a href=&quot;http://redux.js.org/docs/introduction/Ecosystem.html&quot;&gt;Ecosystem&lt;/a&gt; 页面，列出了各种 Reudx 相关的中间件、组件和小工具等，本文主要介绍我日常开发中用到并且深入学习了的中间件，并结合源码解释其工作原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你还不了解 Redux，可以看我写的「&lt;a href=&quot;/2016/01/25/dive-into-redux/&quot;&gt;深入学习 Redux&lt;/a&gt;」。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://codersir.github.io/tags/react/"/>
    
      <category term="redux" scheme="http://codersir.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>Koa 是怎么让你爽的？</title>
    <link href="http://codersir.github.io/2016/06/17/dive-into-koa/"/>
    <id>http://codersir.github.io/2016/06/17/dive-into-koa/</id>
    <published>2016-06-17T09:15:36.000Z</published>
    <updated>2016-06-18T18:28:31.000Z</updated>
    
    <content type="html">&lt;p&gt;经常在网路上看到别人夸 Koa 写的爽，有的甚至产生了「优越感」，但写的都是种种爽的体位，却没有看到有谁详细解释为什么可以采用这些体位，以及为什么这些体位爽。其实，只要看一下 Koa 的源码，就可以知道这些原因。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;当然，还是要有一些准备知识的，你需要知道 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;generator&lt;/a&gt; 是什么？&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yield&lt;/a&gt; 和 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yield *&lt;/a&gt; 是怎么工作的？这些都可以在 &lt;a href=&quot;https://developer.mozilla.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt; 上获取到，这里只分析 Koa 的实现，假设你已经掌握了以上必需的知识。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下代码分析基于 Koa V1.x。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;爽发生在中间件的写法上面。Koa 使用一个数组来维护所有的中间件（middleware），通过调用 &lt;code&gt;app.use&lt;/code&gt; 把中间件添加到这个数组中：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.use = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mdw&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.middleware.push(mdw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中中间件是 generator 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mdw = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;next&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在请求过来的时候，http server 会调用 Koa 的 callback，然后请求通过 Koa 中间件，最后返回结果：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.callback = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = co.wrap(compose(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.middleware))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn.call(...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要流程就是这样了，Koa 之所以支持那些很爽的写法，就是来自下面这段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;co.wrap(compose(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.middleware))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么这段代码究竟有什么黑魔法？且听我慢慢道来。&lt;/p&gt;
&lt;p&gt;第一步，组合中间件，调用 &lt;code&gt;compose&lt;/code&gt; 函数并传入中间件数组作为参数，&lt;code&gt;compose&lt;/code&gt; 的实现非常简单，源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;middleware&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;next&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!next) next = noop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = middleware.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       next = middleware[i].call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;noop&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;compose&lt;/code&gt; 函数组合中间件的方式很巧妙，它递归地把后一个中间件调用返回的 generator 对象作为参数传给上一个中间件进行调用，&lt;code&gt;while&lt;/code&gt; 循环结束后，&lt;code&gt;next&lt;/code&gt; 值为第一个中间件传入第二个中间件调用后的 generator 对象为参数进行调用后返回的 generator 对象。是不是有点绕？那来点简单的代码解释一下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;noop&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;gen&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!next) &amp;#123; next = noop() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next = gen(next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next = log(next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; * next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = compose()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.next()) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;value: 1, done: false&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.next()) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;value: gen, done: false&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.next()) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;value: 3, done: false&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.next()) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;value: undefined, done: true&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过输出可以看出，在 Koa 中，我们通过调用 &lt;code&gt;yield next&lt;/code&gt; 跳转出当前中间件，从 log 中间件跳到了 gen，然后又回到了 log。但是这里有个问题，我们希望输出的 2 并没有出现，所以并没有完全达到我们的期望。所以，接下来，该 co 登场了。&lt;/p&gt;
&lt;p&gt;注意，&lt;code&gt;compose&lt;/code&gt; 函数并没有立即就组合中间件，而是返回一个 generator 函数 gen:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gen = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;next&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!next) next = noop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = middleware.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next = middleware[i].call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二步，调用 &lt;code&gt;co.wrap()&lt;/code&gt; 函数，传入上一步 &lt;code&gt;compose&lt;/code&gt; 返回的 &lt;code&gt;gen&lt;/code&gt; 函数作为参数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fn = co.wrap(gen)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看 co 的源码，&lt;code&gt;co.wrap()&lt;/code&gt; 函数返回一个辅助函数 &lt;code&gt;createPromise&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createPromise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; co.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, gen.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回到上面 Koa 的 callback 源码，http 请求过来的时候，fn 函数调用，此时执行 &lt;code&gt;gen&lt;/code&gt; 函数，并将结果作为参数传给 &lt;code&gt;co&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;co.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, gen.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;generator 函数在被调用的时候，函数体并不会立马执行，只是返回一个 generator 对象，调用 generator 对象的 next 方法的时候，才会执行函数体&lt;/strong&gt;，并且在遇到 yield 的时候暂停执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，这时候，中间件仍然没有组合，直到进入 co 中，&lt;code&gt;onFulfilled()&lt;/code&gt; 函数内部调用 &lt;code&gt;gen.next()&lt;/code&gt; 的时候，&lt;code&gt;compose&lt;/code&gt; 函数返回的 generator 函数体才得以执行。这就是为什么进入 co 后立马调用 &lt;code&gt;onFulfilled()&lt;/code&gt; 函数的原因。&lt;/p&gt;
&lt;p&gt;我们知道 Koa 中，中间件是 generator 函数，所以去掉其他条件判断，co 处理中间件的主要代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;co&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;gen&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctx = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; gen === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) gen = gen.apply(ctx, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!gen || &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; gen.next !== &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resolve(gen);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onFulfilled();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFulfilled&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret = gen.next(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reject(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      next(ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRejected&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret = gen.throw(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reject(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      next(ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ret&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret.done) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resolve(ret.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = toPromise.call(ctx, ret.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value &amp;amp;&amp;amp; isPromise(value)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.then(onFulfilled, onRejected);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; onRejected(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;You may only yield a function, promise, generator, array, or object, &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        + &lt;span class=&quot;string&quot;&gt;&#39;but the following object was passed: &quot;&#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(ret.value) + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toPromise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isGeneratorFunction(obj) || isGenerator(obj)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; co.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么，上面的那个 2 是怎样输出来的呢？实现其实很简单：&lt;/p&gt;
&lt;p&gt;co 反复调用内部的 next() 函数，判断上一次遍历器的返回值状态，如果它未结束并且是 GeneratorFunction 或是 Generator 对象，就再次把它作为参数传入 &lt;code&gt;co&lt;/code&gt; 函数调用。&lt;/p&gt;
&lt;p&gt;借由这样的机制，Koa 就可以在 &lt;code&gt;yield next&lt;/code&gt; 被调用的时候进入下一个中间件，再遇到 &lt;code&gt;yield next&lt;/code&gt; 进入下下个或者遍历结束返回上一个，Koa 文档有一张 Gif 很形象的描述了 Koa 中间件这种机制：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/koajs/koa/blob/master/docs/middleware.gif?raw=true&quot; alt=&quot;co middleware&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;经常在网路上看到别人夸 Koa 写的爽，有的甚至产生了「优越感」，但写的都是种种爽的体位，却没有看到有谁详细解释为什么可以采用这些体位，以及为什么这些体位爽。其实，只要看一下 Koa 的源码，就可以知道这些原因。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://codersir.github.io/tags/nodejs/"/>
    
      <category term="koa" scheme="http://codersir.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 应用优化指南</title>
    <link href="http://codersir.github.io/2016/05/10/AngularJS-app-performance-optimization-guide/"/>
    <id>http://codersir.github.io/2016/05/10/AngularJS-app-performance-optimization-guide/</id>
    <published>2016-05-10T08:15:33.000Z</published>
    <updated>2016-07-07T17:34:07.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/image/ng-perf/batarang.jpg&quot; alt=&quot;Batarang&quot;&gt;&lt;/p&gt;
&lt;p&gt;前两天因为想用国内的 JS CDN，访问到 &lt;a href=&quot;http://www.staticfile.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;staticfile&lt;/a&gt;（七牛提供的一个免费 CDN 服务），导致我的 Chrome 直接卡死了两次，页面关也关不掉，只能退出重启。后来换到 Chrome Canary 才勉强可以访问，用谷歌开发者工具一看，发现前端是用的 AngularJS ，大量的 &lt;code&gt;ng-repeat&lt;/code&gt;，5万多 &lt;code&gt;watcher&lt;/code&gt;，没有做任何性能优化，怎么可能不卡。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ng-perf/staticfile.png&quot; alt=&quot;Profile&quot;&gt;&lt;/p&gt;
&lt;p&gt;今年以来一直在陆陆续续的优化公司基于 AngularJS 开发的应用，也积累了一些经验，正好总结一下 AngularJS webapp 的性能优化指南。&lt;/p&gt;
&lt;h3 id=&quot;1-减少-watcher&quot;&gt;&lt;a href=&quot;#1-减少-watcher&quot; class=&quot;headerlink&quot; title=&quot;1. 减少 watcher&quot;&gt;&lt;/a&gt;1. 减少 &lt;code&gt;watcher&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;我们知道 AngularJS 通过 &lt;em&gt;脏检查&lt;/em&gt;（digest cicle）来更新视图，保持数据和视图的同步，脏检查的效率是和 &lt;code&gt;watcher&lt;/code&gt; 的多少成正相关的，一般来说超过 2000 后就会明显感觉到变慢，所以提高 AngularJS 性能的关键就是减少 &lt;code&gt;watcher&lt;/code&gt; 的数量。&lt;/p&gt;
&lt;p&gt;首先，我们要知道的是，*&lt;em&gt; 什么会产生 &lt;code&gt;watcher&lt;/code&gt; *&lt;/em&gt; ？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$scope.$watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ { stuff } }&lt;/code&gt; 类模板语法&lt;/li&gt;
&lt;li&gt;大多数指令 (比如 &lt;code&gt;ng-show&lt;/code&gt;、&lt;code&gt;ng-if&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Scope 变量 &lt;code&gt;scope: { bar: &amp;#39;=&amp;#39;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;过滤器 &lt;code&gt;{ { value | myFilter } }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng-repeat&lt;/code&gt; 指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面这些情况都会产生 &lt;code&gt;watcher&lt;/code&gt;，那么问题来了，*&lt;em&gt; 怎么减少 &lt;code&gt;watcher&lt;/code&gt; *&lt;/em&gt; 呢?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用单次绑定语法 &lt;code&gt;{ {::} }&lt;/code&gt;&lt;br&gt;AngularJS 从1.3版本开始支持单向绑定语法 &lt;code&gt;::&lt;/code&gt; ，它可以明确的告诉 AngularJS 哪些绑定获取到数据以后就不用关注了，这可以极大的减少 &lt;code&gt;watcher&lt;/code&gt; 的数量，尤其是在 &lt;code&gt;ng-repeat&lt;/code&gt; 内使用。&lt;/li&gt;
&lt;li&gt;避免在 &lt;code&gt;ng-repeat&lt;/code&gt; 中使用 &lt;code&gt;filter&lt;/code&gt;&lt;br&gt;可以先把数据过滤后再传给 &lt;code&gt;ng-repeat&lt;/code&gt;，这样就能避免因为过滤器产生的 &lt;code&gt;watcher&lt;/code&gt; 了。&lt;/li&gt;
&lt;li&gt;尽可能的使用 &lt;code&gt;ng-if&lt;/code&gt; 而不是 &lt;code&gt;ng-show&lt;/code&gt;&lt;br&gt;&lt;code&gt;ng-if&lt;/code&gt; 可以从 Dom 中移除元素，触发 &lt;code&gt;element.$destory()&lt;/code&gt;，删除 &lt;code&gt;ng-if&lt;/code&gt; 内的元素的 &lt;code&gt;watcher&lt;/code&gt;。&lt;code&gt;ng-show&lt;/code&gt; 仍然会 render 元素，只是设置样式为 &lt;code&gt;display:none&lt;/code&gt;。 但是如果元素需要经常变动隐藏还是显示，那么使用 &lt;code&gt;ng-show&lt;/code&gt; 可能会更好，&lt;code&gt;ng-show&lt;/code&gt; 会缓存 Dom，不需要重复解析。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;$watchCollection&lt;/code&gt; 替代 &lt;code&gt;$watch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-减少-digest-次数和范围&quot;&gt;&lt;a href=&quot;#2-减少-digest-次数和范围&quot; class=&quot;headerlink&quot; title=&quot;2. 减少 digest 次数和范围&quot;&gt;&lt;/a&gt;2. 减少 &lt;code&gt;digest&lt;/code&gt; 次数和范围&lt;/h3&gt;&lt;p&gt;减少 &lt;code&gt;watcher&lt;/code&gt; 是从根本上解决问题，如果 &lt;code&gt;watcher&lt;/code&gt; 的优化已经做到极致了，那么这时候就应该换一种思路了。导致 AngularJS App 变慢的原因是 &lt;code&gt;watcher&lt;/code&gt; 太多导致 &lt;code&gt;digest&lt;/code&gt; 变慢，&lt;code&gt;watcher&lt;/code&gt; 已经无法优化了，那么就应该考虑从 &lt;code&gt;digest&lt;/code&gt; 的下手了。&lt;/p&gt;
&lt;p&gt;同样，首先要知道的是，什么情况下会触发 AngularJS 脏检查？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户行为（&lt;code&gt;ng-click&lt;/code&gt;、&lt;code&gt;ng-change&lt;/code&gt;、&lt;code&gt;ng-model&lt;/code&gt;,etc)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$http&lt;/code&gt; 接口响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$q&lt;/code&gt; promises resolved&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;$timeout&lt;/code&gt; 和 &lt;code&gt;$interval&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你手动调用 &lt;code&gt;$scope.$apply&lt;/code&gt; 或 &lt;code&gt;$scope.$digest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优化主要从两个方向进行，&lt;strong&gt;减少脏检查的次数&lt;/strong&gt; 和 &lt;strong&gt;缩小脏检查的范围&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;尽量使用 &lt;code&gt;$scope.$digest&lt;/code&gt; 替代 &lt;code&gt;$scope.$apply&lt;/code&gt;&lt;br&gt;&lt;code&gt;$scope.$digest&lt;/code&gt; 从当前 scope 向下进行脏检查，而 &lt;code&gt;$scope.$apply&lt;/code&gt; 会触发整个应用自顶向下进行脏检查，所以，使用 &lt;code&gt;$scope.$digest&lt;/code&gt; 一般能大大的缩小脏检查的范围。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;$applyAsync&lt;/code&gt; 合并 http 请求&lt;br&gt;通常在 App 启动的时候，会同时发起好几个 http 请求，来获取用户权限或账户信息之类的信息，每次接口返回值的时候，都会触发 AngularJS 的脏检查。这时候，如果可以等到这几个接口都返回以后，再触发脏检查，就能将脏检查的数量由几次减小到1次了。&lt;code&gt;$httpProvider&lt;/code&gt; 的 &lt;a href=&quot;https://code.angularjs.org/1.3.8/docs/api/ng/provider/$httpProvider#useApplyAsync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;useApplyAsync&lt;/a&gt; 方法就是来解决这个问题，它通过 &lt;a href=&quot;https://code.angularjs.org/1.3.8/docs/api/ng/type/$rootScope.Scope#$applyAsync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; $rootScope.$applyAsync&lt;/a&gt; 把大约同一时间（10ms左右）收到的返回值组合到一起处理。&lt;code&gt;applyAsync&lt;/code&gt;的实现机制其实就是事件循环，通过 &lt;code&gt;setTimeout(fn,0)&lt;/code&gt; 来延迟执行函数，可以参考我写的&lt;a href=&quot;/2016/03/13/dive-into-zone/&quot;&gt;《深入学习 Zone》&lt;/a&gt;了解更多。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.config(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;$httpProvider&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $httpProvider.useApplyAsync(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ng-model 防抖动（ Debounce ）&lt;br&gt;搜索框通常会监听用户的 keyup 事件来进行实时匹配推荐，如果每次用户按下按键都调用接口，会出现多次连续的调用接口，导致连续的触发 AngularJS 脏检查，这样很容易造成页面卡顿。这时，可以通过 &lt;code&gt;ng-model&lt;/code&gt; 的 &lt;code&gt;debounce&lt;/code&gt; 参数来限制脏检查的间隔，比如 &lt;code&gt;ng-model-options=&amp;quot;{ debounce: 250 }&lt;/code&gt;，限制每 250ms 内只进行一次脏检查。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;$watchCollection&lt;/code&gt; 替代 &lt;code&gt;$watch&lt;/code&gt; 的第三个参数&lt;br&gt;&lt;code&gt;$watch&lt;/code&gt; 只会比较对象引用是否相同，如果新值和原始值指向同一个索引，那么 &lt;code&gt;$digest&lt;/code&gt; 时就不会触发回调函数。如果要监视对象的每个属性，我们可以给 &lt;code&gt;$watch&lt;/code&gt; 传入第三个参数 &lt;code&gt;true&lt;/code&gt;，这样 AngularJS 就会对对象进行深比较（使用 &lt;code&gt;angular.equals&lt;/code&gt;)，遍历对象的每个值判断是否发生了变化。但如果对象比较复杂，这样做就会带来很大的性能损耗。所以，AngularJS 提供了 &lt;code&gt;$watchCollection&lt;/code&gt; 方法来解决这一问题。&lt;code&gt;$watchCollection&lt;/code&gt; 在脏检查的时候对对象进行浅比较，只会比较对象的第一层属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽量把 DOM 操作移到指令中&lt;br&gt;比如 &lt;code&gt;ng-show&lt;/code&gt; 和 &lt;code&gt;ng-hide&lt;/code&gt;，我们经常通过这些指令来控制元素的显示和隐藏，但这些指令的表达式值都会被 AngularJS 监听，导致 &lt;code&gt;watcher&lt;/code&gt; 增加，而且这些值的变化通常也会引发 AngularJS 的 digest。我们应该尽可能的把这些逻辑移到指令的 &lt;code&gt;link&lt;/code&gt; 函数中。当然，这一点最后考虑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-其他建议&quot;&gt;&lt;a href=&quot;#3-其他建议&quot; class=&quot;headerlink&quot; title=&quot;3. 其他建议&quot;&gt;&lt;/a&gt;3. 其他建议&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;track by&lt;/code&gt; 提高 &lt;code&gt;ng-repeat&lt;/code&gt;性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;禁用 debug 信息 我们看到使用 AngularJS 指令的元素上被添加了许多类，比如 &lt;code&gt;ng-binding&lt;/code&gt;、&lt;code&gt;ng-scope&lt;/code&gt;等，这些类除了调试没有任何作用，&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$compileProvider.debugInfoEnabled(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;耗时的计算考虑移到 web workers 执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;p&gt;怎么测时间都花在哪了？如果我们担心某个函数会很耗时，可以简单的把&lt;code&gt;console.time()&lt;/code&gt; 和 &lt;code&gt;console.timeEnd()&lt;/code&gt; 放在代码的前后来测试代码的运行时间。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;myTimer&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// your code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;myTimer&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个函数可以帮助我们测试某一小段代码的运行时间，如果要观测整个应用的运行时间，就要使用下面这两个工具了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS Batarang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome Timeline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体怎么使用这两种工具就不细说了，尤其是 Chrome 开发者工具，每个前端工程师都应该学会用它进行性能调优。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Batarang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Batarang&lt;/a&gt; 是一种很有意思的武器，蝙蝠形状的回旋刀，是各种电影动画里面蝙蝠侠的武器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;从去年下半年开始，国内很多大公司都开始用 AngularJS 开发用户后台了，比如 upyun、 Ucloud（新版 UCloud 用户后台做的很不错） 和 阿里云。但 F12 查看源代码就会发现，基本上都没有做任何的性能优化。当然，现在电脑性能基本上都处于过剩的状态，即使不做任何优化，只要页面的 &lt;code&gt;watcher&lt;/code&gt; 数量没有多到 staticfile 那样，基本上也不会有什么问题，最多就是把页面响应时间从几百毫秒提升到几十毫秒，1s 以内通常用户都是还可以接受的。但作为一个有追求的程序猿，对自己开发的产品有归属感，你还是可以明显感受到几百毫秒到几十毫秒的巨大差异的。另外一个就是代码规范，社区已经有许多最佳实践了，借鉴最佳实践来改善自己的代码风格是另一个优化的方向。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.alexkras.com/11-tips-to-improve-angularjs-performance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;11 Tips to Improve AngularJS Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codelord.net/2014/06/17/angular-performance-101-slides/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Angular Performance 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/image/ng-perf/batarang.jpg&quot; alt=&quot;Batarang&quot;&gt;&lt;/p&gt;
&lt;p&gt;前两天因为想用国内的 JS CDN，访问到 &lt;a href=&quot;http://www.staticfile.org/&quot;&gt;staticfile&lt;/a&gt;（七牛提供的一个免费 CDN 服务），导致我的 Chrome 直接卡死了两次，页面关也关不掉，只能退出重启。后来换到 Chrome Canary 才勉强可以访问，用谷歌开发者工具一看，发现前端是用的 AngularJS ，大量的 &lt;code&gt;ng-repeat&lt;/code&gt;，5万多 &lt;code&gt;watcher&lt;/code&gt;，没有做任何性能优化，怎么可能不卡。&lt;br&gt;
    
    </summary>
    
    
      <category term="AngularJS" scheme="http://codersir.github.io/tags/AngularJS/"/>
    
      <category term="perf" scheme="http://codersir.github.io/tags/perf/"/>
    
  </entry>
  
  <entry>
    <title>西安四日游</title>
    <link href="http://codersir.github.io/2016/05/01/4-days-in-xian/"/>
    <id>http://codersir.github.io/2016/05/01/4-days-in-xian/</id>
    <published>2016-05-01T14:59:46.000Z</published>
    <updated>2016-05-29T18:17:32.000Z</updated>
    
    <content type="html">&lt;p&gt;去年五一去的庐山，排队的惨烈还历历在目，于是今年就和女朋友决定五一不出去玩了。五一之前请了两天假加上周末，去西安玩了4天，五一就待在家里把游记补上。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;也许是武汉呆的太久了了，西安这个城市让我感觉很舒服。生活节奏适中，虽然没有恩施、成都那么的安逸闲散，但比武汉的风风火火确实是好上许多。西安是一座平静的城市，无论是城市还是生活在其中的人，都让你有种不紧不慢的感觉，踩着自己舒适的节奏。&lt;/p&gt;
&lt;p&gt;西安城很小，这城指的是城墙内的城。城内没有很高的建筑，十层以上的都没有看到过，大都是5层以内的，行走在其中完全没有大城市高楼大厦带来的逼仄感。城内绿化做得很好，种了许多的树，有不少是柳树，春天里漫天飞舞的柳絮给西安人也造成了不小的困扰。&lt;/p&gt;
&lt;p&gt;西安城内大街小巷大都是横平竖直的，以钟楼为中心，上下左右四个方向是西安城东西南北的基准线，因此西安人的方位感都很好，在西安和滴滴司机碰头所有司机都是用的方位词，让我这个路痴定位得好辛苦。在西安的四天基本都在打滴滴，和西安人接触的最多的，就是西安的滴滴车司机。也许是我运气好，但我更愿意相信这是这个城市素质的体现，我接触的每个滴滴司机都很热情和健谈。他们对这个城市有自己的理解，并且愿意与游客分享。&lt;/p&gt;
&lt;p&gt;西安作为一个旅游城市，旅游服务体验确实很好。去秦始皇兵马俑有专门开设的旅游专线，旅游专线巴士解说员专业而干练，解说简明扼要，没有一丝的废话和任何产品推销，毫不夸张的说，这是我体验过的最好的一次旅游解说。秦始皇兵马俑在外国人心中，应该是和长城一样的存在，属于没去就算白来中国的景点。西安城内有许多的外国人，最后都聚集在这里。逛完兵马俑出来的时候，发现外面公园的松树下和道路一旁的石凳上，坐满了来自世界各地的游客。&lt;/p&gt;
&lt;p&gt;接触西安，以一张地铁票开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/xian/ticket.jpg&quot; alt=&quot;西安地铁票&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h3&gt;&lt;p&gt;第一天天气不好，下着小雨，刮着大风，所以选择了在城内的回民街和鼓楼。&lt;/p&gt;
&lt;p&gt;回民街和各个城市的小吃一条街一样，不出所料的让我们失望了，所有的食物都很咸很咸，咸的泛苦了。后来和滴滴车司机聊天，有个师傅说，回民街本地人都不去吃，那些东西吃多了高血压。&lt;br&gt;&lt;img src=&quot;/image/xian/momo.jpg&quot; alt=&quot;回民街羊肉泡馍&quot;&gt;&lt;/p&gt;
&lt;p&gt;鼓楼和钟楼没隔多远，但我们只去了鼓楼，因为听别人说上面的鼓乐表演还不错，确实也没有让我们失望，国外游客对这些表演尤其感兴趣。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/xian/gulou.jpg&quot; alt=&quot;鼓楼合影&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Day-2&quot;&gt;&lt;a href=&quot;#Day-2&quot; class=&quot;headerlink&quot; title=&quot;Day 2&quot;&gt;&lt;/a&gt;Day 2&lt;/h3&gt;&lt;p&gt;第二天天气好了起来，可以出远门了，所以去了临潼的华清池和秦始皇兵马俑。&lt;/p&gt;
&lt;p&gt;出门晚了一点，旅游专线的巴士队伍已经排的很长了。但是队伍消耗的也很快，等半个钟头就差不多可以上车了，不要去坐路边拉客的大巴。&lt;/p&gt;
&lt;p&gt;华清池是历代皇帝的行宫，里面有各种温泉池，不得不感叹，这些人真是太会享受生活了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/xian/huaqingchi_1.jpg&quot; alt=&quot;华清池&quot;&gt;&lt;br&gt;&lt;img src=&quot;/image/xian/huaqingchi_2.jpg&quot; alt=&quot;装逼&quot;&gt;&lt;/p&gt;
&lt;p&gt;兵马俑里面可以待一天，走路走到腿都要断掉了。推荐和其他人拼一个导游，自己到处看收货很少，虽然可以蹭导游，但是零零散散的很不完整，我们这次没有请导游有点遗憾。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/xian/bingmayong.jpg&quot; alt=&quot;兵马俑&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Day-3&quot;&gt;&lt;a href=&quot;#Day-3&quot; class=&quot;headerlink&quot; title=&quot;Day 3&quot;&gt;&lt;/a&gt;Day 3&lt;/h3&gt;&lt;p&gt;第三天上午去了古城墙，可惜风太大，吹着有点冷，没多久女朋友有点不舒服就下去了。下午休息了一下午，晚上去看了音乐喷泉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/xian/guchengqiang_1.jpg&quot; alt=&quot;西安古城墙&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/xian/guchengqiang_2.jpg&quot; alt=&quot;西安古城墙&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Day-4&quot;&gt;&lt;a href=&quot;#Day-4&quot; class=&quot;headerlink&quot; title=&quot;Day 4&quot;&gt;&lt;/a&gt;Day 4&lt;/h3&gt;&lt;p&gt;第四天去了大小雁塔。&lt;/p&gt;
&lt;p&gt;小雁塔很秀气，仰望去很有特色。&lt;br&gt;&lt;img src=&quot;/image/xian/xiaoyanta_2.jpg&quot; alt=&quot;小雁塔&quot;&gt;&lt;/p&gt;
&lt;p&gt;大雁塔景区就比较大了，里面很多人工的景点，登顶后俯视西安城四面还是很不错的。&lt;br&gt;&lt;img src=&quot;/image/xian/dayanta_1.jpg&quot; alt=&quot;大雁塔&quot;&gt;&lt;br&gt;&lt;img src=&quot;/image/xian/dayanta_2.jpg&quot; alt=&quot;大雁塔和音乐喷泉广场&quot;&gt;&lt;br&gt;&lt;img src=&quot;/image/xian/dayanta_3.jpg&quot; alt=&quot;大雁塔&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;这次西安之旅算是一个说走就走的旅行了，周二才决定出去玩，周四人就在西安了。那几天全国各处下雨，可供选择的目的地并不多。起初西安并不是首选，但四天下来，总的来说还是满意的。如果说有什么遗憾，那就是没有去成西安历史博物馆，第三天下午女朋友不舒服所以回宾馆休息了，第四天是周一，博物馆闭馆了。对西安这座城市，还是蛮喜欢的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;去年五一去的庐山，排队的惨烈还历历在目，于是今年就和女朋友决定五一不出去玩了。五一之前请了两天假加上周末，去西安玩了4天，五一就待在家里把游记补上。&lt;br&gt;
    
    </summary>
    
    
      <category term="travel" scheme="http://codersir.github.io/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>再探 JavaScript 中的作用域</title>
    <link href="http://codersir.github.io/2016/04/10/learn-javascript-scope-again/"/>
    <id>http://codersir.github.io/2016/04/10/learn-javascript-scope-again/</id>
    <published>2016-04-10T04:59:34.000Z</published>
    <updated>2016-06-01T18:33:20.000Z</updated>
    
    <content type="html">&lt;p&gt;我们常说，JS 是一门动态（类型）语言，但当我们讨论 JS 中的作用域的时候，大多数时候说的都是静态作用域，也叫&lt;strong&gt;词法作用域&lt;/strong&gt;。作用域是和变量息息相关的，所以当我们谈变量的时候，提到的全局变量、局部变量这些术语，其实说的就是在不同范围（作用域）中的变量。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是作用域&quot;&gt;&lt;a href=&quot;#什么是作用域&quot; class=&quot;headerlink&quot; title=&quot;什么是作用域&quot;&gt;&lt;/a&gt;什么是作用域&lt;/h2&gt;&lt;p&gt;作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。JS 中常见的作用域有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局作用域&lt;/li&gt;
&lt;li&gt;函数作用域&lt;/li&gt;
&lt;li&gt;块级作用域&lt;/li&gt;
&lt;li&gt;模块作用域（存在于 NodeJS 和 ES6 Module中）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;全局作用域&quot;&gt;&lt;a href=&quot;#全局作用域&quot; class=&quot;headerlink&quot; title=&quot;全局作用域&quot;&gt;&lt;/a&gt;全局作用域&lt;/h3&gt;&lt;p&gt;全局作用域的一种判定方式就是看它是否影响到整个程序。在浏览器中，全局作用域就是 &lt;code&gt;window&lt;/code&gt; 对象。NodeJS 采用全局命名空间对象（&lt;a href=&quot;https://nodejs.org/api/globals.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;global&lt;/a&gt;）来存放全局变量，但是需要注意的是，&lt;code&gt;global&lt;/code&gt; 对象中存放却不一定都是全局变量，有些变量是属于模块的，比如 &lt;code&gt;__dirname&lt;/code&gt;、&lt;code&gt;__filename&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;定义在全局作用域中的变量就是全局变量，全局变量在代码的各个位置都可以被访问，所以就可能会出现命名冲突，特别是在使用第三方脚本的时候。为了尽量避免暴露太多的全局变量到全局作用域，推荐使用命名空间或者模块化来解决这个问题。&lt;/p&gt;
&lt;h3 id=&quot;函数作用域&quot;&gt;&lt;a href=&quot;#函数作用域&quot; class=&quot;headerlink&quot; title=&quot;函数作用域&quot;&gt;&lt;/a&gt;函数作用域&lt;/h3&gt;&lt;p&gt;函数作用域的含义是：在函数内定义的变量可以在整个函数范围内（包括嵌套的作用域中）使用。在函数外的作用域中是无法访问函数内部定义的变量很函数的。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	function bar()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		console.log(a+b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bar()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(a) &lt;span class=&quot;comment&quot;&gt;// ReferenceError: a is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通常，我们习惯的思维方式是：先定义一个函数，然后再在里面添加代码。但是反过来想，我们可以认为：从已有的代码中选择一些片段来进行封装，把它们放进一个函数作用域中“隐藏”起来。这种“隐藏”的思维是非常有用的，它能让我们规避命名冲突，同时符合最小暴露原则（再进一步其实就是模块的概念了）。同时，为了避免产生新的变量污染，一般采用立即执行函数表达式（IIFE）来“封闭”一个作用域。&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;function&lt;/span&gt; IIFE(&lt;span class=&quot;name&quot;&gt;global&lt;/span&gt;, undefined)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// balabala&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(&lt;span class=&quot;name&quot;&gt;window&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;块级作用域&quot;&gt;&lt;a href=&quot;#块级作用域&quot; class=&quot;headerlink&quot; title=&quot;块级作用域&quot;&gt;&lt;/a&gt;块级作用域&lt;/h3&gt;&lt;p&gt;在 ES6 之前，我们通常会说 JS 是没有块级作用域的，最常用的一个例子就是 &lt;code&gt;for&lt;/code&gt; 循环：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)	&lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码会输出 10 而不是 &lt;code&gt;undefined&lt;/code&gt;，这就是由于缺少块级作用域导致的问题：我们原想定义在循环体内的变量在外部也可以访问。ES6 为了改变现状，新增了 &lt;code&gt;let&lt;/code&gt; 用来解决这一问题。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)	&lt;span class=&quot;comment&quot;&gt;// ReferenceError: i is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;let&lt;/code&gt; 的另一个区别在于，&lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;let&lt;/code&gt; 声明的变量都会被提升到代码块的顶部，但 &lt;code&gt;var&lt;/code&gt; 在声明前使用会得到 &lt;code&gt;undefined&lt;/code&gt;，&lt;code&gt;let&lt;/code&gt; 在声明前使用则会报&lt;code&gt;ReferenceError&lt;/code&gt;的错误。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)	&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b)	&lt;span class=&quot;comment&quot;&gt;//ReferenceError: b is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样会创建块级作用域的除了 &lt;code&gt;let&lt;/code&gt; 还有 &lt;code&gt;const&lt;/code&gt;，但它的值是固定的。&lt;/p&gt;
&lt;p&gt;那么 ES6 之前的 JavaScript 是否真的没有块级作用域呢？其实还是有的。那就是 &lt;code&gt;try/catch&lt;/code&gt; 代码块所创建的作用域。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;()	&lt;span class=&quot;comment&quot;&gt;//TypeError: undefined is not a function(…)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(err)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err)	&lt;span class=&quot;comment&quot;&gt;//ReferenceError: err is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模块作用域&quot;&gt;&lt;a href=&quot;#模块作用域&quot; class=&quot;headerlink&quot; title=&quot;模块作用域&quot;&gt;&lt;/a&gt;模块作用域&lt;/h3&gt;&lt;p&gt;模块作用域的含义是：在模块中定义的变量，只在这个模块范围内可以访问。在 ES6 之前，JavaScript 中并没有原生的模块的支持，所以模块作用域只对 NodeJS 有意义。ES6 引入了对模块的支持。&lt;/p&gt;
&lt;h3 id=&quot;其他作用域&quot;&gt;&lt;a href=&quot;#其他作用域&quot; class=&quot;headerlink&quot; title=&quot;其他作用域&quot;&gt;&lt;/a&gt;其他作用域&lt;/h3&gt;&lt;p&gt;和模块作用域类似的还有文件作用域，比如 C/C+++ 采用的就是文件作用域，定义在文件中的全局变量和全局函数都属于这个文件，在更高级的语言中，文件作用域被模块作用域所取代，比如 Python、NodeJS、ES6 module。&lt;/p&gt;
&lt;h2 id=&quot;词法作用域查找的特点&quot;&gt;&lt;a href=&quot;#词法作用域查找的特点&quot; class=&quot;headerlink&quot; title=&quot;词法作用域查找的特点&quot;&gt;&lt;/a&gt;词法作用域查找的特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用域会在找到第一个匹配的标识符时停止，在多层嵌套的作用域中可以定义同名的标识符，内部的标识符会“遮蔽”外部的标识符，这叫做“遮蔽效应”。&lt;/li&gt;
&lt;li&gt;词法作用域只会查找一级标识符，比如 &lt;code&gt;foo.bar.baz&lt;/code&gt;，词法作用域只会试图查找 &lt;code&gt;foo&lt;/code&gt; 标识符，找到这个变量后，对象访问属性规则接管对 &lt;code&gt;bar&lt;/code&gt; 和 &lt;code&gt;baz&lt;/code&gt; 的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作用域是个很基础但是很重要的概念，所有的计算机语言都会花大量的篇幅来解释作用域，各个语言的作用域划分也都各有不同，这里我们对作用域的讨论只在 JavaScript 的范围之内。&lt;/p&gt;
&lt;p&gt;动态类型的好处是书写简单，我们写 JS 的时候不需要定义类型或接口，也不需要担心把 string 变量赋值 boolean 会报错。但任何事物都是两面的，享受了书写代码时的便利，就要付出不便于调试和理解的代价。如果你对&lt;br&gt;“静态 JavaScript ”感兴趣的话，强烈推荐你试一试 TypeScript，可以参考我写的&lt;a href=&quot;/2016/01/12/learn-typescript/&quot;&gt;TypeScript 入门教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;其他资源&quot;&gt;&lt;a href=&quot;#其他资源&quot; class=&quot;headerlink&quot; title=&quot;其他资源&quot;&gt;&lt;/a&gt;其他资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Scope_(computer_science)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(JavaScript Scoping and Hoisting)[&lt;a href=&quot;http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们常说，JS 是一门动态（类型）语言，但当我们讨论 JS 中的作用域的时候，大多数时候说的都是静态作用域，也叫&lt;strong&gt;词法作用域&lt;/strong&gt;。作用域是和变量息息相关的，所以当我们谈变量的时候，提到的全局变量、局部变量这些术语，其实说的就是在不同范围（作用域）中的变量。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://codersir.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>再探 JavaScript 中的 this</title>
    <link href="http://codersir.github.io/2016/04/10/learn-javascript-this-again/"/>
    <id>http://codersir.github.io/2016/04/10/learn-javascript-this-again/</id>
    <published>2016-04-10T04:55:20.000Z</published>
    <updated>2016-07-08T15:42:58.000Z</updated>
    
    <content type="html">&lt;p&gt;JavaScript 中的 &lt;code&gt;this&lt;/code&gt; 关键字其实并不复杂，之所以需要再学一次是因为标准的推进，&lt;code&gt;this&lt;/code&gt; 的值在不同的情况下表现的与之前有所不同。在 ES6 之前，我们谈 &lt;code&gt;this&lt;/code&gt; 的时候，说的最多的就是 &lt;code&gt;this&lt;/code&gt; 是动态作用域的。但随着 ES6 箭头函数的引入，现在也会经常看到大家说起 &lt;em&gt;词法作用域&lt;/em&gt; 的 &lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;动态作用域&quot;&gt;&lt;a href=&quot;#动态作用域&quot; class=&quot;headerlink&quot; title=&quot;动态作用域&quot;&gt;&lt;/a&gt;动态作用域&lt;/h2&gt;&lt;p&gt;大多数情况下，&lt;code&gt;this&lt;/code&gt; 的值由函数&lt;strong&gt;调用时&lt;/strong&gt;的上下文决定，也就是我们常说的动态作用域。它不能在函数运行时指定，而且可能因为每次调用的位置不同而不同。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: function foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(this.a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function doFoo(fn)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;doFoo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(obj.foo)&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;bind-函数&quot;&gt;&lt;a href=&quot;#bind-函数&quot; class=&quot;headerlink&quot; title=&quot;bind 函数&quot;&gt;&lt;/a&gt;&lt;code&gt;bind&lt;/code&gt; 函数&lt;/h2&gt;&lt;p&gt;前面我们说到 &lt;code&gt;this&lt;/code&gt; 可能会因为调用位置不同而不同，所以 ES5 中引入了 &lt;code&gt;bind&lt;/code&gt; 函数，&lt;code&gt;bind&lt;/code&gt; 函数可以设置函数的 &lt;code&gt;this&lt;/code&gt; 值而不管它如何调用。&lt;/p&gt;
&lt;h2 id=&quot;词法作用域&quot;&gt;&lt;a href=&quot;#词法作用域&quot; class=&quot;headerlink&quot; title=&quot;词法作用域&quot;&gt;&lt;/a&gt;词法作用域&lt;/h2&gt;&lt;p&gt;箭头函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; 指向定义时的作用域，且不会改变&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plus: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.plus()  &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plus: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.plus()  &lt;span class=&quot;comment&quot;&gt;//10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;call(…) 和 apply(…)&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 中的 &lt;code&gt;this&lt;/code&gt; 关键字其实并不复杂，之所以需要再学一次是因为标准的推进，&lt;code&gt;this&lt;/code&gt; 的值在不同的情况下表现的与之前有所不同。在 ES6 之前，我们谈 &lt;code&gt;this&lt;/code&gt; 的时候，说的最多的就是 &lt;code&gt;this&lt;/code&gt; 是动态作用域的。但随着 ES6 箭头函数的引入，现在也会经常看到大家说起 &lt;em&gt;词法作用域&lt;/em&gt; 的 &lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codersir.github.io/tags/JavaScript/"/>
    
      <category term="ecma" scheme="http://codersir.github.io/tags/ecma/"/>
    
  </entry>
  
  <entry>
    <title>理解 Zone 的实现机制</title>
    <link href="http://codersir.github.io/2016/03/13/dive-into-zone/"/>
    <id>http://codersir.github.io/2016/03/13/dive-into-zone/</id>
    <published>2016-03-13T13:02:10.000Z</published>
    <updated>2016-06-18T19:00:43.000Z</updated>
    
    <content type="html">&lt;p&gt;Zone 是一种用来拦截和追踪异步任务的机制。&lt;/p&gt;
&lt;p&gt;Zone 可以做以下事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拦截异步任务调度&lt;/li&gt;
&lt;li&gt;包装异步操作的错误处理和 zone 追踪的回调函数&lt;/li&gt;
&lt;li&gt;提供一种办法添加数据到 zones&lt;/li&gt;
&lt;li&gt;提供最后一帧错误处理的具体上下文&lt;/li&gt;
&lt;li&gt;拦截阻塞方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;zone-的原理&quot;&gt;&lt;a href=&quot;#zone-的原理&quot; class=&quot;headerlink&quot; title=&quot;zone 的原理&quot;&gt;&lt;/a&gt;zone 的原理&lt;/h2&gt;&lt;p&gt;zone 本身并不做任何事情，它依赖其他代码让平台API穿过它。&lt;/p&gt;
&lt;p&gt;最简单的形式是，zone 通过 patch 异步API，允许我们拦截异步操作的调用和调度，并且在异步任务之前和之后执行额外的代码。&lt;/p&gt;
&lt;p&gt;拦截规则通过 ZoneConfig 来配置。&lt;/p&gt;
&lt;p&gt;一个系统中可以同时存在多个 zone 的实例，但是在任意时刻都只有一个处于激活状态，可以通过 &lt;code&gt;Zone.current&lt;/code&gt; 获取到。&lt;/p&gt;
&lt;h3 id=&quot;包装回调函数&quot;&gt;&lt;a href=&quot;#包装回调函数&quot; class=&quot;headerlink&quot; title=&quot;包装回调函数&quot;&gt;&lt;/a&gt;包装回调函数&lt;/h3&gt;&lt;p&gt;zone 的一个重要部分就是在异步操作的过程中保持一致。为了做到这一点，当一个未来任务通过异步API被调用的时候，需要捕获并随后重现当前 zone。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; oldZone = _currentZone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;currentZone = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do stuff ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _currentZone = oldZone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你把异步操作当做线程执行来看，那么当前 Zone 就是线程局部变量。&lt;/p&gt;
&lt;h3 id=&quot;异步操作调度&quot;&gt;&lt;a href=&quot;#异步操作调度&quot; class=&quot;headerlink&quot; title=&quot;异步操作调度&quot;&gt;&lt;/a&gt;异步操作调度&lt;/h3&gt;&lt;p&gt;基本上有三种类型的任务可以被调度,每个异步 API 都通过以下 API 来建模和路由：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在当前任务之后立即执行的 MicroTask，不可取消&lt;/li&gt;
&lt;li&gt;稍后执行的 TimerTask，可以取消，通常包括这些方法： &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, &lt;code&gt;requestAnimationFrame&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;用来监听未来事件的 EventTask，可能多次执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;组合性&quot;&gt;&lt;a href=&quot;#组合性&quot; class=&quot;headerlink&quot; title=&quot;组合性&quot;&gt;&lt;/a&gt;组合性&lt;/h3&gt;&lt;p&gt;Zones 可以通过 &lt;code&gt;Zone.fork()&lt;/code&gt; 方法组合在一起。子 zone 可以创建它自己规则，一个子 zone ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过父 zone 代理拦截，并且可选地在包装回调之前和之后添加钩子&lt;/li&gt;
&lt;li&gt;或不用代理自己处理请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;组合性让 zones 可以彼此保持独立不干扰。比如顶层 zone 可以选择处理错误，但子 zone 可以追踪用户行为。&lt;/p&gt;
&lt;h3 id=&quot;根-zone&quot;&gt;&lt;a href=&quot;#根-zone&quot; class=&quot;headerlink&quot; title=&quot;根 zone&quot;&gt;&lt;/a&gt;根 zone&lt;/h3&gt;&lt;p&gt;浏览器在开始的时候会创建一个特殊的根 zone，所有的 zone 都是根 zone 的子 zone。&lt;/p&gt;
&lt;h2 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h2&gt;&lt;h3 id=&quot;Zone-fork-ZoneSpec&quot;&gt;&lt;a href=&quot;#Zone-fork-ZoneSpec&quot; class=&quot;headerlink&quot; title=&quot;Zone.fork(ZoneSpec)&quot;&gt;&lt;/a&gt;&lt;code&gt;Zone.fork(ZoneSpec)&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;复制一个子 zone，传入子 zone 的配置规则，通常是一系列的生命钩子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onFork&lt;/code&gt;，拦截 zone 的复制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onIntercept&lt;/code&gt;，拦截回调函数的包装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onInvoke&lt;/code&gt;，拦截回调函数的调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onHandleError&lt;/code&gt;，拦截错误处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onScheduleTask&lt;/code&gt;，拦截任务调度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onInvokeTask&lt;/code&gt;，拦截任务执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onCancelTask&lt;/code&gt;，拦截任务取消&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onHasTask&lt;/code&gt;，任务队列状态变化通知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 &lt;code&gt;properties&lt;/code&gt; 参数，还可以给子 zone 传入其他的属性，通过 &lt;code&gt;zone.get&lt;/code&gt; 方法获取这些属性：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Zone.current.get(&lt;span class=&quot;string&quot;&gt;&#39;reset&#39;&lt;/span&gt;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Timeout callback called after &#39;&lt;/span&gt; + Zone.current.get(&lt;span class=&quot;string&quot;&gt;&#39;time&#39;&lt;/span&gt;)())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mySpec = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; time = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, start = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer = performance ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                performance.now.bind(performance) :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now.bind(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onScheduleTask: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;delegate, current, target, task&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      start = timer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      delegate.scheduleTask(target, task)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;scheduling &#39;&lt;/span&gt; + task.source + &lt;span class=&quot;string&quot;&gt;&#39; =&amp;gt; &#39;&lt;/span&gt; + task.data.handleId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onInvokeTask: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;delegate, current, target, task&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      delegate.invokeTask(target, task)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      time += timer() - start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Invoking &#39;&lt;/span&gt; + task.source + &lt;span class=&quot;string&quot;&gt;&#39; =&amp;gt; &#39;&lt;/span&gt; + task.data.handleId + &lt;span class=&quot;string&quot;&gt;&#39; after &#39;&lt;/span&gt; + time + &lt;span class=&quot;string&quot;&gt;&#39; ms&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    properties: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      reset: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        start = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      time: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; timer() - start + &lt;span class=&quot;string&quot;&gt;&#39; ms&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zone.current.fork(mySpec).run(main)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Zone-wrap&quot;&gt;&lt;a href=&quot;#Zone-wrap&quot; class=&quot;headerlink&quot; title=&quot;Zone.wrap&quot;&gt;&lt;/a&gt;&lt;code&gt;Zone.wrap&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;包装回调函数使之在调用过程中可以正确的恢复当前 zone。在函数被包装起来之前，可以通过配置 &lt;code&gt;ZoneSpec.onIntercept&lt;/code&gt; 来进行拦截。&lt;/p&gt;
&lt;h3 id=&quot;Zone-run&quot;&gt;&lt;a href=&quot;#Zone-run&quot; class=&quot;headerlink&quot; title=&quot;Zone.run&quot;&gt;&lt;/a&gt;&lt;code&gt;Zone.run&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在指定的 zone 中调用函数，返回回调函数执行后的返回值。在回调函数被调用之前可以通过配置 &lt;code&gt;ZoneSpec.onInvoke&lt;/code&gt; 来进行拦截。&lt;/p&gt;
&lt;h3 id=&quot;Zone-runGuarded&quot;&gt;&lt;a href=&quot;#Zone-runGuarded&quot; class=&quot;headerlink&quot; title=&quot;Zone.runGuarded&quot;&gt;&lt;/a&gt;&lt;code&gt;Zone.runGuarded&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Zone.run&lt;/code&gt; + 错误处理，任何的错误都会被转到 &lt;code&gt;ZoneDelegate.HandleError&lt;/code&gt;。错误在处理之前可以通过配置 &lt;code&gt;ZoneSpec.onHandleError&lt;/code&gt; 来进行拦截。&lt;/p&gt;
&lt;h3 id=&quot;Zone-runTask&quot;&gt;&lt;a href=&quot;#Zone-runTask&quot; class=&quot;headerlink&quot; title=&quot;Zone.runTask&quot;&gt;&lt;/a&gt;&lt;code&gt;Zone.runTask&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在任务的 zone 中恢复当前 zone 后执行任务。任务在执行之前，可以通过配置 &lt;code&gt;Zone.onInvokeTask&lt;/code&gt; 来进行拦截。&lt;/p&gt;
&lt;h3 id=&quot;Zone-scheduleMicroTask-Zone-scheduleMacroTask-Zone-scheduleEventTask&quot;&gt;&lt;a href=&quot;#Zone-scheduleMicroTask-Zone-scheduleMacroTask-Zone-scheduleEventTask&quot; class=&quot;headerlink&quot; title=&quot;Zone.scheduleMicroTask Zone.scheduleMacroTask Zone.scheduleEventTask&quot;&gt;&lt;/a&gt;&lt;code&gt;Zone.scheduleMicroTask&lt;/code&gt; &lt;code&gt;Zone.scheduleMacroTask&lt;/code&gt; &lt;code&gt;Zone.scheduleEventTask&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;安排不同类型的任务，通过 &lt;code&gt;ZoneSpec.onScheduleTask&lt;/code&gt; 来进行拦截。&lt;/p&gt;
&lt;h3 id=&quot;Zone-cancelTask&quot;&gt;&lt;a href=&quot;#Zone-cancelTask&quot; class=&quot;headerlink&quot; title=&quot;Zone.cancelTask&quot;&gt;&lt;/a&gt;&lt;code&gt;Zone.cancelTask&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;拦截已安排任务的取消，任务取消之前可以通过 &lt;code&gt;ZoneSpec.onCancelTask&lt;/code&gt; 来进行拦截，默认情况下任务取消会调用 &lt;code&gt;Task.cancelFn&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;NgZone-in-Angular2&quot;&gt;&lt;a href=&quot;#NgZone-in-Angular2&quot; class=&quot;headerlink&quot; title=&quot;NgZone in Angular2&quot;&gt;&lt;/a&gt;NgZone in Angular2&lt;/h2&gt;&lt;p&gt;Angular2 通过 &lt;strong&gt;变化检测&lt;/strong&gt; 来更新视图，那么谁来告诉 Angular2 有状态发生了改变呢？那就是 NgZone。在 Angular2 中，将不再需要不停的进行脏检查来保持视图和状态的同步，当有状态发生变化时，NgZone 的事件钩子会通知 Angular 来更新视图。Angular2 的 ZoneSpec 如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    properties:&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;any&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&#39;isAngularZone&#39;: true&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onInvokeTask: (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   applyThis: any, applyArgs: any): any =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.onEnter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return delegate.invokeTask(target, task, applyThis, applyArgs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.onLeave();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onInvoke: (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               applyThis: any, applyArgs: any[], source: string): any =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.onEnter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return delegate.invoke(target, callback, applyThis, applyArgs, source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.onLeave();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onHasTask:(delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        delegate.hasTask(target, hasTaskState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (current == target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          // We are only interested in hasTask events which originate from our zone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          // (A child hasTask event is not interesting to us)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          if (hasTaskState.change == &#39;microTask&#39;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.setMicrotask(hasTaskState.microTask);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125; else if (hasTaskState.change == &#39;macroTask&#39;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.setMacrotask(hasTaskState.macroTask);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       delegate.handleError(target, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       this.onError(new NgZoneError(error, error.stack));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 &lt;code&gt;onEnter&lt;/code&gt; 和 &lt;code&gt;onLeave&lt;/code&gt; 就是相应事件的回调函数。&lt;/p&gt;
&lt;p&gt;下面这些情况会被 Angular2 判断为有状态发生了改变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户行为&lt;/li&gt;
&lt;li&gt;http 返回&lt;/li&gt;
&lt;li&gt;定时器，&lt;code&gt;setTimeout&lt;/code&gt;,&lt;code&gt;setInterval&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zone 为这些事件都添加了钩子，用来通知 Angular 再完美不过了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/zone.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zone.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Zone 是一种用来拦截和追踪异步任务的机制。&lt;/p&gt;
&lt;p&gt;Zone 可以做以下事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拦截异步任务调度&lt;/li&gt;
&lt;li&gt;包装异步操作的错误处理和 zone 追踪的回调函数&lt;/li&gt;
&lt;li&gt;提供一种办法添加数据到 zones&lt;/li&gt;
&lt;li
    
    </summary>
    
    
      <category term="angular2" scheme="http://codersir.github.io/tags/angular2/"/>
    
      <category term="zone" scheme="http://codersir.github.io/tags/zone/"/>
    
  </entry>
  
  <entry>
    <title>angular2 中的依赖注入</title>
    <link href="http://codersir.github.io/2016/02/20/dependency-injection-in-angular-2/"/>
    <id>http://codersir.github.io/2016/02/20/dependency-injection-in-angular-2/</id>
    <published>2016-02-20T09:14:07.000Z</published>
    <updated>2016-05-29T18:17:32.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是依赖注入&quot;&gt;&lt;a href=&quot;#什么是依赖注入&quot; class=&quot;headerlink&quot; title=&quot;什么是依赖注入&quot;&gt;&lt;/a&gt;什么是依赖注入&lt;/h3&gt;&lt;h3 id=&quot;Angular1-中的依赖注入&quot;&gt;&lt;a href=&quot;#Angular1-中的依赖注入&quot; class=&quot;headerlink&quot; title=&quot;Angular1 中的依赖注入&quot;&gt;&lt;/a&gt;Angular1 中的依赖注入&lt;/h3&gt;&lt;h3 id=&quot;Angular2-中的依赖注入&quot;&gt;&lt;a href=&quot;#Angular2-中的依赖注入&quot; class=&quot;headerlink&quot; title=&quot;Angular2 中的依赖注入&quot;&gt;&lt;/a&gt;Angular2 中的依赖注入&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是依赖注入&quot;&gt;&lt;a href=&quot;#什么是依赖注入&quot; class=&quot;headerlink&quot; title=&quot;什么是依赖注入&quot;&gt;&lt;/a&gt;什么是依赖注入&lt;/h3&gt;&lt;h3 id=&quot;Angular1-中的依赖注入&quot;&gt;&lt;a href=&quot;#Angular1-中的依赖注入&quot; c
    
    </summary>
    
    
      <category term="angular2" scheme="http://codersir.github.io/tags/angular2/"/>
    
      <category term="di" scheme="http://codersir.github.io/tags/di/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的装饰器是什么？</title>
    <link href="http://codersir.github.io/2016/01/31/what-is-decorator-in-javascript/"/>
    <id>http://codersir.github.io/2016/01/31/what-is-decorator-in-javascript/</id>
    <published>2016-01-30T16:36:01.000Z</published>
    <updated>2016-05-29T18:17:32.000Z</updated>
    
    <content type="html">&lt;p&gt;装饰器是 ES7（也就是ES2016）的提案，虽然听着感觉好像还有点遥远，毕竟 ES6 还没有走多久呢，但实际上，2016年已经到来，也就是说，ES7 的提案今年就会成为新的标准，同时借助一些编译器（比如babel），我们早已经可以在正式环境中使用它了。另外，TypeScript 在去年和&lt;br&gt;AtScript 合并后发布的 1.5 版本，就已经支持装饰器语法了。基于 TypeScript 开发的 Angular2 里面也大量的使用了装饰器。&lt;/p&gt;
&lt;h2 id=&quot;什么是装饰器&quot;&gt;&lt;a href=&quot;#什么是装饰器&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰器&quot;&gt;&lt;/a&gt;什么是装饰器&lt;/h2&gt;&lt;p&gt;用提案的描述来说，装饰器是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个求值结果为函数的表达式，接受目标对象、名称和装饰器描述作为参数，可选地返回一个装饰器描述来安装到目标对象上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;怎么使用装饰器&quot;&gt;&lt;a href=&quot;#怎么使用装饰器&quot; class=&quot;headerlink&quot; title=&quot;怎么使用装饰器&quot;&gt;&lt;/a&gt;怎么使用装饰器&lt;/h2&gt;&lt;p&gt;TypeScript 已经完整的支持了 ES7 装饰器的接口，通过 &lt;a href=&quot;https://github.com/Microsoft/TypeScript/blob/master/src/lib/core.d.ts#L1254&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript 装饰器的实现&lt;/a&gt;，来进一步掌握装饰器的使用：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ClassDecorator = &amp;lt;TFunction extends &lt;span class=&quot;keyword&quot;&gt;Function&lt;/span&gt;&amp;gt;(target: TFunction) =&amp;gt; TFunction | &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PropertyDecorator = (target: &lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt;, propertyKey: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; | symbol) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; MethodDecorator = &amp;lt;T&amp;gt;(target: &lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt;, propertyKey: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; | symbol, &lt;span class=&quot;keyword&quot;&gt;descriptor&lt;/span&gt;: TypedPropertyDescriptor&amp;lt;T&amp;gt;) =&amp;gt; TypedPropertyDescriptor&amp;lt;T&amp;gt; | &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ParameterDecorator = (target: &lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt;, propertyKey: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; | symbol, parameterIndex: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的代码可以知道，装饰器可以用来注解&lt;strong&gt;类&lt;/strong&gt;，&lt;strong&gt;属性&lt;/strong&gt;，&lt;strong&gt;方法&lt;/strong&gt;和&lt;strong&gt;参数&lt;/strong&gt;，下面分别看不同情况下如何使用和实现。&lt;/p&gt;
&lt;h3 id=&quot;装饰类&quot;&gt;&lt;a href=&quot;#装饰类&quot; class=&quot;headerlink&quot; title=&quot;装饰类&quot;&gt;&lt;/a&gt;装饰类&lt;/h3&gt;&lt;p&gt;TypeScript 类装饰器接口如下：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;declare &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ClassDecorator = &amp;lt;TFunction &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Function&lt;/span&gt;&lt;/span&gt;&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;: TFunction) =&amp;gt; TFunction | void;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过接口可以知道类装饰器接受一个目标函数作为参数，考虑下面简单的类：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; name: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; power: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name: string, power: string) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showPower()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; `$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125; has special power: $&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power&amp;#125;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把上面的代码编译为 JavaScript，得到：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Hero = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, power)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hero.prototype.showPower = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot; has special power: &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Hero;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面给 &lt;code&gt;Hero&lt;/code&gt; 类添加一个 &lt;code&gt;@logClass&lt;/code&gt; 的装饰器：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@logClass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; name: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; power: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name: string, power: string) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showPower()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; `$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125; has special power: $&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power&amp;#125;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新编译成 JavaScript ：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Hero = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, power)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hero.prototype.showPower = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot; has &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hero = __decorate([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ], Hero);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Hero;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码在返回&lt;code&gt;Hero&lt;/code&gt;构造函数之前，将它作为参数传给了&lt;code&gt;__decorate&lt;/code&gt;函数，那&lt;code&gt;__decorate&lt;/code&gt;函数做了什么？看编译后的 JavaScript 代码，可以看到该函数实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 保证上下文中只有一个 __decorate 函数，不会被反复重载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; __decorate = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.__decorate) || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;decorators, target, key, desc&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// 装饰类的时候，__decorate 函数接受两个参数，所以 r = target，也就是上文的构造函数 Hero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = c &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ? target : desc === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; ? desc = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(target, key) : desc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这是另外一个 ES7 API 了，先不管，看 fallback 方案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Reflect&lt;/span&gt; === &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Reflect&lt;/span&gt;.decorate === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) r = &lt;span class=&quot;built_in&quot;&gt;Reflect&lt;/span&gt;.decorate(decorators, target, key, desc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// 从右向左依次执行 decorator 函数，对 class 而言，相当于 decorators.reduceRight(function(o, d)&amp;#123; return (d &amp;amp;&amp;amp; d(r)) || o &amp;#125;, r)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = decorators.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d = decorators[i]) r = (c &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ? d(r) : c &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ? d(target, key, r) : d(target, key)) || r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    最后返回 r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;amp;&amp;amp; r &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(target, key, r), r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;__decorate&lt;/code&gt; 函数体其实很简单，主要是进行一些条件判断，根据传入参数个数的不同判断装饰器的类型，并执行相关的装饰器函数。&lt;/p&gt;
&lt;p&gt;需要注意的两个函数是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Object.getOwnPropertyDescriptor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;br&gt;第一个函数是获取对象自有属性的描述符，第二是添加或修改对象的自有属性，具体用法查看 MDN。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;知道装饰器装饰类是如何进行工作后，下面来完善 &lt;code&gt;@logClass&lt;/code&gt; 装饰器。通过类装饰器接口可以知道，它接受一个函数作为参数，并返回函数。 &lt;code&gt;@logClass&lt;/code&gt; 装饰器的目的是，在每次英雄被派出去拯救世界的时候，&lt;br&gt;记录下来是哪个英雄出去了，为他祈祷，实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(target: any)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 保存原始构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; original = target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 工具函数，生成类的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(constructor, args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c : any = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; constructor.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.prototype = constructor.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; c();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 添加行为到构造器调用时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f : any = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;rest_arg&quot;&gt;...args&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&lt;span class=&quot;string&quot;&gt;&quot;God bless &quot;&lt;/span&gt; + args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; construct(original, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 复制原始构造器的原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  f.prototype = original.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 返回新的构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码已经清晰的注释了，就不添加更多的说明了，可以看到，类装饰器就是&lt;strong&gt;给构造函数添加额外的动作&lt;/strong&gt;。现在当派出一个新的英雄之前，我们会为他祈福：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; batman = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hero(&lt;span class=&quot;string&quot;&gt;&#39;batman&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;fly&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// God bless batman&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;batman &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Hero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.typescriptlang.org/Playground#src=%40logClass%0D%0Aclass%20Hero%20%7B%0D%0A%20%20%20%20public%20name%3A%20string%3B%0D%0A%20%20%20%20public%20power%3A%20string%3B%0D%0A%0D%0A%20%20%20%20constructor(name%3A%20string%2C%20power%3A%20string)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.name%20%3D%20name%0D%0A%20%20%20%20%20%20%20%20this.power%20%3D%20power%0D%0A%20%20%20%20%7D%0D%0A%0D%0A%20%20%20%20showPower()%7B%0D%0A%20%20%20%20%09return%20%60%24%7Bthis.name%7D%20has%20special%20power%3A%20%24%7Bthis.power%7D%60%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Afunction%20logClass(target%3A%20any)%20%7B%0D%0A%0D%0A%20%20%2F%2F%20%E4%BF%9D%E5%AD%98%E5%8E%9F%E5%A7%8B%E6%9E%84%E9%80%A0%E5%99%A8%0D%0A%20%20var%20original%20%3D%20target%3B%0D%0A%0D%0A%20%20%2F%2F%20%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%EF%BC%8C%E7%94%9F%E6%88%90%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%0D%0A%20%20function%20construct(constructor%2C%20args)%20%7B%0D%0A%20%20%20%20var%20c%20%3A%20any%20%3D%20function%20()%20%7B%0D%0A%20%20%20%20%20%20return%20constructor.apply(this%2C%20args)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20c.prototype%20%3D%20constructor.prototype%3B%0D%0A%20%20%20%20return%20new%20c()%3B%0D%0A%20%20%7D%0D%0A%0D%0A%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E8%A1%8C%E4%B8%BA%E5%88%B0%E6%9E%84%E9%80%A0%E5%99%A8%E8%B0%83%E7%94%A8%E6%97%B6%0D%0A%20%20var%20f%20%3A%20any%20%3D%20function%20(...args)%20%7B%0D%0A%20%20%20%20console.log(%22God%20bless%20%22%20%2B%20args%5B0%5D)%3B%20%0D%0A%20%20%20%20return%20construct(original%2C%20args)%3B%0D%0A%20%20%7D%0D%0A%0D%0A%20%20%2F%2F%20%E5%A4%8D%E5%88%B6%E5%8E%9F%E5%A7%8B%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E5%8E%9F%E5%9E%8B%0D%0A%20%20f.prototype%20%3D%20original.prototype%3B%0D%0A%0D%0A%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E6%96%B0%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%0D%0A%20%20return%20f%3B%0D%0A%7D%0D%0Anew%20Hero(&#39;batman&#39;%2C%20&#39;fly&#39;)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;play&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;装饰属性&quot;&gt;&lt;a href=&quot;#装饰属性&quot; class=&quot;headerlink&quot; title=&quot;装饰属性&quot;&gt;&lt;/a&gt;装饰属性&lt;/h3&gt;&lt;p&gt;TypeScript 属性装饰器接口如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PropertyDecorator = (target: &lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt;, propertyKey: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; | symbol) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由接口可以知道，属性装饰器接受两个参数，一个是目标对象，另一个是属性名称，没有返回值。&lt;br&gt;继续使用上面 Hero 类，这次给 &lt;code&gt;power&lt;/code&gt; 属性加上 &lt;code&gt;@logProperty&lt;/code&gt; 属性装饰器，在给英雄使用超能力的时候，添加 Bgm，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; name: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@logProperty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; power: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name:string, power:string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showPower()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; `$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125; has special power: $&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power&amp;#125;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样，编译成 JavaScript 后得到：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Hero = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, power)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hero.prototype.showPower = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot; has special power: &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __decorate([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logProperty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ], Hero.prototype, &lt;span class=&quot;string&quot;&gt;&quot;power&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Hero;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此处再次用到了 &lt;code&gt;__decorate&lt;/code&gt; 函数，但传入参数的个数是3个，装饰器，构造函数的原型和属性名，所以精简一下 &lt;code&gt;__decorator&lt;/code&gt; 函数，得到属性装饰器的版本：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; __decorate = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.__decorate) || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;decorators, target, key, desc&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	r = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(target, key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从右向左依次执行 decorator 函数，相当于 decorators.reduceRight(function(o, d)&amp;#123; return (d &amp;amp;&amp;amp; d(target, key) || o &amp;#125;, r)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = decorators.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d = decorators[i]) r = d(target, key) || r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外对比类装饰器，可以看到这次没有用 &lt;code&gt;__decorate&lt;/code&gt; 函数的返回值覆盖原始的类，属性装饰器的接口是没有返回值（=&amp;gt;void)的。&lt;/p&gt;
&lt;p&gt;现在知道了属性装饰器接受构造器的原型和属性名作为参数，并且没有返回值，下面开始着手实现 &lt;code&gt;@logProperty&lt;/code&gt; 装饰器：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logProperty&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;target: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;, key: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 存储属性值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _val = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 获取属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getter = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`此处应有 Bgm &lt;span class=&quot;subst&quot;&gt;$&amp;#123;_val&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 设置属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; setter = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;newVal&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`切换特技 &lt;span class=&quot;subst&quot;&gt;$&amp;#123;newVal&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _val = newVal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 删除属性并重新设置该属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[key]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建一个新的属性，使用我们自定义的存储器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(target, key, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;: getter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;: setter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      enumerable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;// todo&lt;br&gt;// this在此处的使用需要进一步说明，为什么 this 的上下文是构造器原型？&lt;/p&gt;
&lt;p&gt;现在，英雄放大招和切换大招的时候，我们就会看到控制台输出了：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; batman = new Hero(&lt;span class=&quot;string&quot;&gt;&#39;batman&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;fly&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 切换特技 fly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;batman.showPower()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 此处应有 Bgm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;batman&lt;span class=&quot;selector-class&quot;&gt;.power&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;doublekill&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 切换特技 doublekill&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.typescriptlang.org/Playground#src=class%20Hero%20%7B%0D%0A%20%20%20%20public%20name%3A%20string%0D%0A%20%20%20%20%40logProperty%0D%0A%20%20%20%20public%20power%3A%20string%0D%0A%0D%0A%20%20%20%20constructor(name%3Astring%2C%20power%3Astring)%7B%0D%0A%20%20%20%20%20%20%20%20this.name%20%3D%20name%0D%0A%20%20%20%20%20%20%20%20this.power%20%3D%20power%0D%0A%20%20%20%20%7D%0D%0A%0D%0A%20%20%20%20showPower()%7B%0D%0A%20%20%20%20%20%20%20%20return%20%60%24%7Bthis.name%7D%20has%20special%20power%3A%20%24%7Bthis.power%7D%60%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Afunction%20logProperty(target%3A%20any%2C%20key%3A%20string)%20%7B%0D%0A%0D%0A%20%20%2F%2F%20%E5%AD%98%E5%82%A8%E5%B1%9E%E6%80%A7%E5%80%BC%0D%0A%20%20var%20_val%20%3D%20this%5Bkey%5D%3B%0D%0A%0D%0A%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%B1%9E%E6%80%A7%0D%0A%20%20var%20getter%20%3D%20function%20()%20%7B%0D%0A%20%20%20%20console.log(%60%E6%AD%A4%E5%A4%84%E5%BA%94%E6%9C%89%20Bgm%20%24%7B_val%7D%60)%3B%0D%0A%20%20%20%20return%20_val%3B%0D%0A%20%20%7D%3B%0D%0A%0D%0A%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7%0D%0A%20%20var%20setter%20%3D%20function%20(newVal)%20%7B%0D%0A%20%20%20%20console.log(%60%E5%88%87%E6%8D%A2%E7%89%B9%E6%8A%80%20%24%7BnewVal%7D%60)%3B%0D%0A%20%20%20%20_val%20%3D%20newVal%3B%0D%0A%20%20%7D%3B%0D%0A%0D%0A%20%20%2F%2F%20%E5%88%A0%E9%99%A4%E5%B1%9E%E6%80%A7%E5%B9%B6%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE%E8%AF%A5%E5%B1%9E%E6%80%A7%0D%0A%20%20if%20(delete%20this%5Bkey%5D)%20%7B%0D%0A%0D%0A%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%88%91%E4%BB%AC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%AD%98%E5%82%A8%E5%99%A8%0D%0A%20%20%20%20Object.defineProperty(target%2C%20key%2C%20%7B%0D%0A%20%20%20%20%20%20get%3A%20getter%2C%0D%0A%20%20%20%20%20%20set%3A%20setter%2C%0D%0A%20%20%20%20%20%20enumerable%3A%20true%2C%0D%0A%20%20%20%20%20%20configurable%3A%20true%0D%0A%20%20%20%20%7D)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0Avar%20hero%20%3D%20new%20Hero(&#39;batman&#39;%2C&#39;fly&#39;)%0D%0Ahero.showPower()%0D%0Ahero.power%20%3D%20&#39;doublekill&#39;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;play&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;装饰方法&quot;&gt;&lt;a href=&quot;#装饰方法&quot; class=&quot;headerlink&quot; title=&quot;装饰方法&quot;&gt;&lt;/a&gt;装饰方法&lt;/h3&gt;&lt;p&gt;TypeScript 属性方法接口如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; MethodDecorator = &amp;lt;T&amp;gt;(target: &lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt;, propertyKey: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; | symbol, &lt;span class=&quot;keyword&quot;&gt;descriptor&lt;/span&gt;: TypedPropertyDescriptor&amp;lt;T&amp;gt;) =&amp;gt; TypedPropertyDescriptor&amp;lt;T&amp;gt; | &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法装饰器接受三个参数，返回属性描述符或者没有返回。这次我们装饰 &lt;code&gt;showPower&lt;/code&gt;方法，给它添加 &lt;code&gt;@logMethod&lt;/code&gt; 装饰器：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; name: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; power: string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name:string, power:string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@logMethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showPower()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; `$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125; has special power: $&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power&amp;#125;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译为 JavaScript 得到：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Hero = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, power)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hero.prototype.showPower = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot; has special power: &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __decorate([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logMethod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ], Hero.prototype, &lt;span class=&quot;string&quot;&gt;&quot;showPower&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Hero;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时 &lt;code&gt;__decoreate&lt;/code&gt; 函数去掉条件判断得到：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; __decorate = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.__decorate) || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;decorators, target, key, desc&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = desc || &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(target, key),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = decorators.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d = decorators[i]) r = d(target, key, r) || r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(target, key, r), r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面我们来实现 &lt;code&gt;@logMethod&lt;/code&gt; 装饰器：&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(target:any, key:string, descriptor: object)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; originalMethod = descriptor.value; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  descriptor.value =  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;rest_arg&quot;&gt;...args&lt;/span&gt;: any[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = args.map(a =&amp;gt; JSON.stringify(a)).join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = originalMethod.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r = JSON.stringify(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      console.log(`Call: $&amp;#123;key&amp;#125;($&amp;#123;a&amp;#125;) =&amp;gt; $&amp;#123;r&amp;#125;`);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; descriptor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.typescriptlang.org/Playground#src=class%20Hero%20%7B%0D%0A%20%20%20%20public%20name%3A%20string%3B%0D%0A%20%20%20%20public%20power%3A%20string%3B%0D%0A%0D%0A%20%20%20%20constructor(name%3A%20string%2C%20power%3A%20string)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.name%20%3D%20name%0D%0A%20%20%20%20%20%20%20%20this.power%20%3D%20power%0D%0A%20%20%20%20%7D%0D%0A%0D%0A%20%20%20%20%40logMethod%0D%0A%20%20%20%20showPower()%20%7B%0D%0A%20%20%20%20%20%20%20%20return%20%60%24%7Bthis.name%7D%20has%20special%20power%3A%20%24%7Bthis.power%7D%60%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Afunction%20logMethod(target%3A%20Object%2C%20key%3Astring%2C%20descriptor%3A%20TypedPropertyDescriptor%3Cany%3E)%7B%0D%0A%20%20var%20originalMethod%20%3D%20descriptor.value%3B%20%0D%0A%0D%0A%20%20%2F%2Fediting%20the%20descriptor%2Fvalue%20parameter%0D%0A%20%20descriptor.value%20%3D%20%20function%20(...args%3A%20any%5B%5D)%20%7B%0D%0A%20%20%20%20%20%20var%20a%20%3D%20args.map(a%20%3D%3E%20JSON.stringify(a)).join()%3B%0D%0A%20%20%20%20%20%20%2F%2F%20note%20usage%20of%20originalMethod%20here%0D%0A%20%20%20%20%20%20var%20result%20%3D%20originalMethod.apply(this%2C%20args)%3B%0D%0A%20%20%20%20%20%20var%20r%20%3D%20JSON.stringify(result)%3B%0D%0A%20%20%20%20%20%20console.log(%60Call%3A%20%24%7Bkey%7D(%24%7Ba%7D)%20%3D%3E%20%24%7Br%7D%60)%3B%0D%0A%20%20%20%20%20%20return%20result%3B%0D%0A%20%20%7D%0D%0A%0D%0A%20%20%2F%2F%20return%20edited%20descriptor%20as%20opposed%20to%20overwriting%20%0D%0A%20%20%2F%2F%20the%20descriptor%20by%20returning%20a%20new%20descriptor%0D%0A%20%20return%20descriptor%3B%0D%0A%7D%0D%0A%0D%0Anew%20Hero(&#39;batman&#39;%2C%20&#39;fly&#39;).showPower()&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;play&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;装饰参数&quot;&gt;&lt;a href=&quot;#装饰参数&quot; class=&quot;headerlink&quot; title=&quot;装饰参数&quot;&gt;&lt;/a&gt;装饰参数&lt;/h3&gt;&lt;p&gt;TypeScript 参数装饰器接口如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ParameterDecorator = (target: &lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt;, propertyKey: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; | symbol, parameterIndex: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数装饰器也接受三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;属性名&lt;/li&gt;
&lt;li&gt;参数索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们给 &lt;code&gt;showPower&lt;/code&gt; 函数添加一个表示连击次数的参数，并用 &lt;code&gt;@logParameter&lt;/code&gt; 装饰它：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt; Hero &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public power: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor(&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, power:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.power = power&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showPower(@logParameter &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;        return&lt;/span&gt; `$&amp;#123;&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; power damage`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译为 JavaScript 得到：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Hero = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, power)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.power = power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hero.prototype.showPower = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(time)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; time + &lt;span class=&quot;string&quot;&gt;&quot; times power damage&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __decorate([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __param(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, logParamater)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ], Hero.prototype, &lt;span class=&quot;string&quot;&gt;&quot;showPower&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Hero;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;观察 &lt;code&gt;__decorate&lt;/code&gt; 函数，我们发现这里调用了另外一个 &lt;code&gt;__param&lt;/code&gt; 函数，&lt;code&gt;__param&lt;/code&gt; 函数实现如下：&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; __param = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.__param) || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(paramIndex, decorator)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(target, key)&lt;/span&gt; &lt;/span&gt;&amp;#123; decorator(target, key, paramIndex); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__param&lt;/code&gt; 函数接受两个参数，参数索引和装饰器函数，返回一个装饰器函数的包装函数。&lt;/p&gt;
&lt;p&gt;简化后的 &lt;code&gt;__decorate&lt;/code&gt; 函数和上面的方法装饰器得到的一样。&lt;/p&gt;
&lt;p&gt;下面我们来实现 &lt;code&gt;@logParameter&lt;/code&gt; 装饰器函数：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt; logParameter(&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;: Object, key : string, &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var metadataKey = `log_$&amp;#123;key&amp;#125;_parameters`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Array.isArray(&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;[metadataKey])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;[metadataKey].push(&lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;[metadataKey] = [&lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;logParameter&lt;/code&gt; 函数在 &lt;code&gt;Hero.prototype&lt;/code&gt; 上添加了一个属性 &lt;code&gt;log_showPower_parameters&lt;/code&gt; 用来记录&lt;code&gt;showPower&lt;/code&gt;函数被装饰参数的索引。&lt;/p&gt;
&lt;p&gt;参数装饰器不支持改变构造器、方法或属性的行为，它只应该用来生成一些元数据。&lt;/p&gt;
&lt;h3 id=&quot;给装饰器传入参数&quot;&gt;&lt;a href=&quot;#给装饰器传入参数&quot; class=&quot;headerlink&quot; title=&quot;给装饰器传入参数&quot;&gt;&lt;/a&gt;给装饰器传入参数&lt;/h3&gt;&lt;p&gt;我们可以通过装饰器构造函数来创建可配置的装饰器。下面创建一个可配置的类装饰器：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@logClassWithArgs&lt;/span&gt;(&amp;#123;&lt;span class=&quot;string&quot;&gt;sex:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt; &amp;#123;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt; string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function logClassWidthArgs(&lt;span class=&quot;string&quot;&gt;options:&lt;/span&gt; Object)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;target:&lt;/span&gt; Object) =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;装饰器非常的强大，我们可以使用装饰器大量的简化代码，Angular2 中也大量使用了装饰器，比如 &lt;code&gt;@Component()&lt;/code&gt;、&lt;code&gt;@view()&lt;/code&gt;、&lt;code&gt;@Input()&lt;/code&gt;、&lt;code&gt;@Output()&lt;/code&gt;、&lt;code&gt;@Injectable()&lt;/code&gt;等。后面&lt;br&gt;将会深入写 Angular2 中的装饰器。&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; class=&quot;headerlink&quot; title=&quot;reference&quot;&gt;&lt;/a&gt;reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javascript-decorators提案&lt;/a&gt;以及 &lt;a href=&quot;https://github.com/xuhong/javascript-decorators&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的翻译版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.wolksoftware.com/decorators-reflection-javascript-typescript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;decorators-reflection-javascript-typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29775830/how-to-implement-a-typescript-decorator/29837695#29837695&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to implement a typescript decorator?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/tree/gh-pages/decorators-es7/read-write&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google ES7 decorators sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;装饰器是 ES7（也就是ES2016）的提案，虽然听着感觉好像还有点遥远，毕竟 ES6 还没有走多久呢，但实际上，2016年已经到来，也就是说，ES7 的提案今年就会成为新的标准，同时借助一些编译器（比如babel），我们早已经可以在正式环境中使用它了。另外，TypeScript 在去年和&lt;br&gt;AtScript 合并后发布的 1.5 版本，就已经支持装饰器语法了。基于 TypeScript 开发的 Angular2 里面也大量的使用了装饰器。&lt;/p&gt;
&lt;h2 id=&quot;什么是装饰器&quot;&gt;&lt;a href=&quot;#什么是装饰器&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰器&quot;&gt;&lt;/a&gt;什么是装饰器&lt;/h2&gt;&lt;p&gt;用提案的描述来说，装饰器是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个求值结果为函数的表达式，接受目标对象、名称和装饰器描述作为参数，可选地返回一个装饰器描述来安装到目标对象上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="typescript" scheme="http://codersir.github.io/tags/typescript/"/>
    
      <category term="es2016" scheme="http://codersir.github.io/tags/es2016/"/>
    
      <category term="decorator" scheme="http://codersir.github.io/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>深入学习 Redux</title>
    <link href="http://codersir.github.io/2016/01/25/dive-into-redux/"/>
    <id>http://codersir.github.io/2016/01/25/dive-into-redux/</id>
    <published>2016-01-25T08:33:25.000Z</published>
    <updated>2016-07-10T13:56:31.000Z</updated>
    
    <content type="html">&lt;p&gt;当我们谈 Redux 的时候，一般都会把它和 React 联系到一起。但是，Redux 作为一种状态管理方案，并不限于和 React 一起使用，你可以扩展到其他任何合适的框架，比如 Angular。Redux 的目标是 &lt;strong&gt;使状态的改变可预测&lt;/strong&gt;。Redux 通过下面三个原则约束来实现这一目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一数据源：整个应用的状态都存在单一 store 的对象树里面&lt;/li&gt;
&lt;li&gt;状态只读：改变状态的唯一方法就是触发一个 action，action 是一个描述发生了什么的对象&lt;/li&gt;
&lt;li&gt;变化都由纯函数生成：通过 reducers 来指定状态树怎么被 action 转化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redux 中有3个概念，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;li&gt;reducer&lt;/li&gt;
&lt;li&gt;store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们之间的转换流程图如下：&lt;br&gt;&lt;img src=&quot;/image/blog/redux-flow.png&quot; alt=&quot;Redux-flow&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-action&quot;&gt;&lt;a href=&quot;#什么是-action&quot; class=&quot;headerlink&quot; title=&quot;什么是 action&quot;&gt;&lt;/a&gt;什么是 action&lt;/h3&gt;&lt;p&gt;action 是简单的 JavaScript 对象，包含一个值唯一的 &lt;code&gt;type&lt;/code&gt; 属性用&lt;strong&gt;来描述状态的变化&lt;/strong&gt;。比如添加评论的 action:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ADD_COMMENT&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: &lt;span class=&quot;string&quot;&gt;&#39;add a comment&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常我们会写个 action creator 用来帮助创建 action，简化输入：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;addComment&lt;/span&gt;(text)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ADD_COMMENT&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;create_at&lt;/span&gt;: Date.now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 action creator 需要读取当前状态或者调用 API，或者进行其他有副作用的操作，比如路由过渡，那么它应该返回 &lt;code&gt;async action&lt;/code&gt; 而不是 &lt;code&gt;action&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;async action（异步操作）是准备传递给 &lt;code&gt;dispatch()&lt;/code&gt; 函数但却还没准备好被 &lt;code&gt;reducer&lt;/code&gt; 调用的 &lt;code&gt;action&lt;/code&gt;，它们会在传递给 &lt;code&gt;dispatch()&lt;/code&gt; 函数前被 &lt;code&gt;middleware(中间件)&lt;/code&gt; 转化为 &lt;code&gt;action&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;action 的结构并没有什么限制，只要是 JavaScript 对象并且包含 &lt;code&gt;type&lt;/code&gt; 字段即可。当然，为了团队协作和编码风格的统一，有个规范总是好的，可以通过&lt;a href=&quot;https://github.com/acdlite/redux-actions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-actions&lt;/a&gt; 来写 FSA(Flux Standard Action)。&lt;/p&gt;
&lt;h3 id=&quot;reducer-怎么工作&quot;&gt;&lt;a href=&quot;#reducer-怎么工作&quot; class=&quot;headerlink&quot; title=&quot;reducer 怎么工作&quot;&gt;&lt;/a&gt;reducer 怎么工作&lt;/h3&gt;&lt;p&gt;reducer 就对应这个名称来源，是 Redux 中最重要的概念。和 &lt;code&gt;arr.reduce&lt;/code&gt; 方法类似，它的用法是传入当前状态和要进行的操作，返回下一个状态：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;previousState&lt;/span&gt;, action) =&amp;gt; newState&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;reducer 根据 action 的描述来改变 state&lt;/strong&gt;。&lt;strong&gt;reducer 必须是纯函数&lt;/strong&gt;,也就是说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回值和传入的值结构一致&lt;/li&gt;
&lt;li&gt;没有副作用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以下列事情不应该在 &lt;code&gt;reducer&lt;/code&gt; 中进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改变传入的参数值&lt;/li&gt;
&lt;li&gt;进行有副作用的操作，比如调用API和路由过渡&lt;/li&gt;
&lt;li&gt;调用非纯函数，比如 &lt;code&gt;Date.now()&lt;/code&gt; 和 &lt;code&gt;Math.random()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，我们会根据职能分工不同分割成多个 reducer，对于这种情况，Redux 提供了 &lt;code&gt;combineReducers&lt;/code&gt; 函数来把它们结合到一起：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combineReducers&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;reducers&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reducerKeys = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(reducers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; finalReducers = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; reducerKeys.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key = reducerKeys[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过滤掉不合法的 reducer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; reducers[key] === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      finalReducers[key] = reducers[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; finalReducerKeys = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(finalReducers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combination&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;state = &amp;#123;&amp;#125; , action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hasChanged = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextState = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; finalReducerKeys.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key = finalReducerKeys[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reducer = finalReducers[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; previousStateForKey = state[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextStateForKey = reducer(previousStateForKey, action)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 不能返回 undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; nextStateForKey === &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; errorMessage = getUndefinedStateErrorMessage(key, action)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(errorMessage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nextState[key] = nextStateForKey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      hasChanged = hasChanged || nextStateForKey !== previousStateForKey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hasChanged ? nextState : state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;combineReducers&lt;/code&gt; 函数是个闭包，它的作用是返回一个调用 reducers 的函数，调用每个 reducer 函数时传入 key 值对应的 state 片段作为相应 reducer 的初始 state。&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;我们不改变 state 而是返回它的一个副本&lt;/strong&gt;，可以通过 &lt;code&gt;Object.assign({}, state, newState)&lt;/code&gt; 或 对象展开操作符 &lt;code&gt;{...state, ...newState}&lt;/code&gt; 来完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任何时候 reducer 都不应该返回 &lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt;，如果下一个状态为 &lt;code&gt;undefined&lt;/code&gt;，那么就返回它之前的状态，否则 Redux 会报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;store-是什么&quot;&gt;&lt;a href=&quot;#store-是什么&quot; class=&quot;headerlink&quot; title=&quot;store 是什么&quot;&gt;&lt;/a&gt;store 是什么&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;store 用来存储应用的状态&lt;/strong&gt;。在 Redux 中，store 是状态的中心，提供以下 API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;store.dispatch(action)&lt;/code&gt; 分发 action&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;store.subscribe(callback)&lt;/code&gt; 添加事件监听，触发时调用回调函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.subscribe(callback)&lt;/code&gt; 返回一个函数，调用这个函数注销事件监听&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个应用只有一个 &lt;code&gt;store&lt;/code&gt;，它包含该应用完整的状态树。我们通过调用 &lt;code&gt;createStore&lt;/code&gt; 函数来创建 store：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createStore&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;reducer, preloadedState, enhancer&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; preloadedState === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; enhancer === &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enhancer = preloadedState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    preloadedState = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; enhancer !== &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; enhancer !== &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Expected the enhancer to be a function.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// enhancer 通常为 applyMiddleware 函数调用后返回的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; enhancer(createStore)(reducer, preloadedState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 返回 store 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscribe,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    replaceReducer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [$$observable]: observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;createStore&lt;/code&gt; 最终返回一个 store 对象，包含 &lt;code&gt;dispatch&lt;/code&gt;、&lt;code&gt;getState&lt;/code&gt; 等方法。如果给 &lt;code&gt;createStore&lt;/code&gt; 函数传入了 enhancer，那么就会先调用 enhancer 函数。enhancer 函数通常是一些中间件，被 &lt;code&gt;applyMiddleware&lt;/code&gt; 函数调用后返回改变了 &lt;code&gt;dispatch&lt;/code&gt; 函数行为的 store 对象。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;rest_arg&quot;&gt;...middlewares&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (createStore) =&amp;gt; (reducer, preloadedState, enhancer) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = createStore(reducer, preloadedState, enhancer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dispatch = store.dispatch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chain = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 对 middleware 只暴露 getState 和 dispatch 这两个 API&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; middlewareAPI = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      getState: store.getState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dispatch: (action) =&amp;gt; dispatch(action)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    chain = middlewares.map(middleware =&amp;gt; middleware(middlewareAPI))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch = compose(...chain)(store.dispatch) &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 返回新的 dispatch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...store,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dispatch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么新的 dispatch 函数究竟是怎样的呢？这里调用了 &lt;code&gt;compose&lt;/code&gt; 函数，&lt;code&gt;compose&lt;/code&gt; 函数实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;rest_arg&quot;&gt;...funcs&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (funcs.length === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arg =&amp;gt; arg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (funcs.length === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; funcs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; last = funcs[funcs.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; rest = funcs.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (...args) =&amp;gt; rest.reduceRight((composed, f) =&amp;gt; f(composed), last(...args))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;compose&lt;/code&gt; 函数的作用就是把中间件组合起来，通过 &lt;code&gt;Array.reduceRight&lt;/code&gt; 函数实现柯里化，比如有两个中间件返回函数 f 和 g，被 compose 函数调用后结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compose(f,g)(store.dispatch) &lt;span class=&quot;comment&quot;&gt;// 得到 f(g(store.dispatch))，注意我们把 store.dispatch 作为初始值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样处理后，以后每次调用 &lt;code&gt;store.dispatch&lt;/code&gt; 函数时，都会依次穿过各个中间件，得到链式调用中间件的效果，有一点 express 中间件的感觉了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Redux 的代码非常简单，也很好理解，作者在 gist 有一个&lt;a href=&quot;https://gist.github.com/gaearon/ffd88b0e4f00b22c3159&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;瘦身版的 Redux&lt;/a&gt;，去掉了不必要的条件判断和错误处理，只有百来行代码。虽然简单，但它背后的思想非常值得玩味，比如单一数据源、纯函数等。另外，Redux 作者的表达能力非常好，这一点在文档上得到了充分的展示，对一些概念的解释非常老练，由浅入深，层层推进，真是让人佩服。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/gaearon/ffd88b0e4f00b22c3159&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;slim-redux.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started with Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当我们谈 Redux 的时候，一般都会把它和 React 联系到一起。但是，Redux 作为一种状态管理方案，并不限于和 React 一起使用，你可以扩展到其他任何合适的框架，比如 Angular。Redux 的目标是 &lt;strong&gt;使状态的改变可预测&lt;/strong&gt;。
    
    </summary>
    
    
      <category term="react" scheme="http://codersir.github.io/tags/react/"/>
    
      <category term="redux" scheme="http://codersir.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 入门教程</title>
    <link href="http://codersir.github.io/2016/01/12/learn-typescript/"/>
    <id>http://codersir.github.io/2016/01/12/learn-typescript/</id>
    <published>2016-01-12T04:58:51.000Z</published>
    <updated>2016-05-29T18:17:32.000Z</updated>
    
    <content type="html">&lt;p&gt;TypeScript 是微软出的一个 JavaScript 超集，给 JavaScript 添加了类型，可以编译成 plain JavaScript。最近开始学习Angular2，Angular2 支持 TypeScript 来编写，也是社区推荐的方式。&lt;/p&gt;
&lt;h3 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h3&gt;&lt;p&gt;TypeScript 为你添加了你期望 JavaScript 拥有的基本数据类型：numbers、strings、structures、boolean、array、enum 等。&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isDone: &lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;//boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; height: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;;         &lt;span class=&quot;comment&quot;&gt;//number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;xuhong&#39;&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;//string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;[] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];    &lt;span class=&quot;comment&quot;&gt;//array &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list:&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;gt; = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;//generic array type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Color &amp;#123;Red:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, Green, Blue&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c: Color = Color.Red;       &lt;span class=&quot;comment&quot;&gt;//enum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colorName:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; = Color[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;//get enum value use number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; notSure:&lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;            &lt;span class=&quot;comment&quot;&gt;//any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;notSure = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;warning&lt;/span&gt;:&lt;span class=&quot;title&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&amp;#123;          &lt;span class=&quot;comment&quot;&gt;//no return value&#39;s function&#39;s return type is void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.warning(&lt;span class=&quot;string&quot;&gt;&#39;warning message&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Interfaces&quot;&gt;&lt;a href=&quot;#Interfaces&quot; class=&quot;headerlink&quot; title=&quot;Interfaces&quot;&gt;&lt;/a&gt;Interfaces&lt;/h3&gt;&lt;p&gt;TypeScript 的一个主要原则是采用鸭式辩形或者说是构造子类来进行类型检查。在 TypeScript 中，接口就是充当这样的角色来命名这些类型，同时也是你项目内部代码以及和外部代码进行协作的有效方式。&lt;/p&gt;
&lt;p&gt;当不使用接口时，我们这样写代码：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function sayHello(person: &amp;#123;&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + person.&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;me&lt;/span&gt; = &amp;#123;&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;: &#39;xuhong&#39;, age: &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayHello(&lt;span class=&quot;keyword&quot;&gt;me&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;sayHello 函数接受一个参数，该参数必须是个对象并且有一个名为 &lt;code&gt;name&lt;/code&gt; 的属性。虽然传入的对象还有其他的属性，但是编译器只会检查必须的属性以及它的类型。下面用接口重新写这个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; personName &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;person: personName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + person.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; me = &amp;#123;name: &lt;span class=&quot;string&quot;&gt;&#39;xuhong&#39;&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayHello(me)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们可以使用接口 &lt;code&gt;personName&lt;/code&gt; 来描述参数的要求。注意我们不需要像其他的语言一样写明我们传进 &lt;code&gt;sayHello&lt;/code&gt; 的对象实现了这个接口，只要这个对象满足接口列出的所有要求就够了。&lt;br&gt;另外，并不是所有的参数都是必须的，接口也支持可选参数，在属性名后面添加一个 ? 表明这个属性是可选的。&lt;/p&gt;
&lt;h4 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h4&gt;&lt;p&gt;接口可以描述许多 JavaScript 对象的形状。除了可以描述拥有属性的对象，接口也可以描述函数类型。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SearchFunc&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;string&quot;&gt;source:&lt;/span&gt; string, &lt;span class=&quot;string&quot;&gt;subString:&lt;/span&gt; string): &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;string&quot;&gt;mySearch:&lt;/span&gt; SearchFunc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mySearch = functiuon(&lt;span class=&quot;string&quot;&gt;src:&lt;/span&gt; string, &lt;span class=&quot;string&quot;&gt;sub:&lt;/span&gt; string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; src.search(sub) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;数组类型&quot;&gt;&lt;a href=&quot;#数组类型&quot; class=&quot;headerlink&quot; title=&quot;数组类型&quot;&gt;&lt;/a&gt;数组类型&lt;/h4&gt;&lt;p&gt;以及描述数组类型&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; StringArray &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [index: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;]: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myArr: stringArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myArr = [&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;def&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TypeScript 支持两种索引类型：数字和字符串。而且可以同时支持两种索引，但是要求数字索引返回的值是字符串索引返回的值的子类。它也要求所有的属性匹配它们的返回值类型，下面的例子会被类型检查器报错，因为length属性的类型和索引的类型不匹配&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Dictionary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [index: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;]: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;类类型&quot;&gt;&lt;a href=&quot;#类类型&quot; class=&quot;headerlink&quot; title=&quot;类类型&quot;&gt;&lt;/a&gt;类类型&lt;/h4&gt;&lt;p&gt;当类实现接口时，只有类的实例部分会被检查，构造器部分是静态部分，不会被检查。&lt;/p&gt;
&lt;figure class=&quot;highlight delphi&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; ClockInterface &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    currentTime: Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTime(d: date);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Clock impletements ClockInterface &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    currentTime: Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTime(d: date) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.currentTime = d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h: number, m: number)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;扩展接口&quot;&gt;&lt;a href=&quot;#扩展接口&quot; class=&quot;headerlink&quot; title=&quot;扩展接口&quot;&gt;&lt;/a&gt;扩展接口&lt;/h4&gt;&lt;p&gt;像类一样，接口也可以彼此扩展对方：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Shape &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    color: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Square &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; Shape &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sideLength: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; square = &amp;lt;Square&amp;gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square.color = &lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square.sideLength = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;组合类型&quot;&gt;&lt;a href=&quot;#组合类型&quot; class=&quot;headerlink&quot; title=&quot;组合类型&quot;&gt;&lt;/a&gt;组合类型&lt;/h4&gt;&lt;p&gt;接口可以描述 JavaScript 中许多的类型，有时候你可能会遇到一个对象充当上述几种类型的组合。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface Counter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (start: number): string&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    interval:&lt;/span&gt; number&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reset(): void&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var c: Counter&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.reset()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.interval = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h3&gt;&lt;p&gt;没有类以前，JavaScript 的继承主要通过原型来实现，ES6 给 JavaScript 添加了类以后，我们也可以采用基于类的面向对象方式来实现继承了。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; name: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor(theName:string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = theName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Rhino&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor()&amp;#123; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;symbol&quot;&gt;&#39;Rhin&lt;/span&gt;o&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animal = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;symbol&quot;&gt;&#39;Goa&lt;/span&gt;t&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rhino = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Rhino&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TypeScript 给类添加了 公开/私有（public/priviate）属性声明，默认所有的属性都是公开的。另外，&lt;code&gt;priviate&lt;/code&gt; 和 &lt;code&gt;public&lt;/code&gt; 关键字用在初始化函数参数的属性声明时，可以作为创建并初始化类成员的便捷方式。&lt;br&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor(&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; name: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;TypeScript 支持 getters/setters 拦截对象成员的存取。&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; passcode = &lt;span class=&quot;string&quot;&gt;&quot;secret passcode&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Employee&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; _fullName: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fullName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;): &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._fullName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fullName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newName: &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (passcode &amp;amp;&amp;amp; passcode == &lt;span class=&quot;string&quot;&gt;&quot;secret passcode&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._fullName = newName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&quot;Error: Unauthorized update of employee!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; employee = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Employee();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;employee.fullName = &lt;span class=&quot;string&quot;&gt;&quot;Bob Smith&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (employee.fullName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(employee.fullName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TypeScript 支持静态属性声明，所有的静态属性只在类的内部可见，类的实例无法访问静态属性。在类的内部，通过在静态属性名前添加类名前缀来访问该属性(className.staticPropertity)。&lt;br&gt;另外，因为类创建类型，所以你也可以在某些地方用它们替代接口。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    x:&lt;/span&gt; number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    y:&lt;/span&gt; number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point3d&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    z:&lt;/span&gt; number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;string&quot;&gt;point3d:&lt;/span&gt; Point3d = &amp;#123;&lt;span class=&quot;string&quot;&gt;x:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;z:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h3&gt;&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;和 JavaScript 一样，函数可以被定义为命名函数和匿名函数。在 JavaScript 中，这两种命名方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;named&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt; add(x, y)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Anonymous &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myAdd = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;函数类型-1&quot;&gt;&lt;a href=&quot;#函数类型-1&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h4&gt;&lt;p&gt;在 TypeScript 中，我们给上面的函数加上类型：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myAdd: (x:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;)=&amp;gt;&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;  = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 上面的写法太冗余了，TypeScript 可以通过‘上下文类型‘推断出函数的类型：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myAdd = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myAdd: (baseValue:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, increment:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;)=&amp;gt;&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x,y&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;可选参数和默认参数&quot;&gt;&lt;a href=&quot;#可选参数和默认参数&quot; class=&quot;headerlink&quot; title=&quot;可选参数和默认参数&quot;&gt;&lt;/a&gt;可选参数和默认参数&lt;/h4&gt;&lt;p&gt;和 JavaScript 不一样的是，TypeScript 默认所有参数都是必须的。但是我们可以在参数后面添加 ‘?’ 来表示该参数是可选的。&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildName&lt;/span&gt;(firstName: string, middleName?: string, lastName = &quot;xuhong)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(middleName)&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;firstName&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + middleName + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + lastName &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; firstName + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + lastName &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;剩余参数&quot;&gt;&lt;a href=&quot;#剩余参数&quot; class=&quot;headerlink&quot; title=&quot;剩余参数&quot;&gt;&lt;/a&gt;剩余参数&lt;/h4&gt;&lt;p&gt;剩余参数是一个参数数组，让你可以一次传入任意数量的参数：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//restOfName is an Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(firstName: string, &lt;span class=&quot;rest_arg&quot;&gt;...restOfName&lt;/span&gt;: string[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; firstName + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + restOfName.join(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myname = buildName(&lt;span class=&quot;string&quot;&gt;&quot;chen&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;xuhong&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;codersir&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;重载&quot;&gt;&lt;a href=&quot;#重载&quot; class=&quot;headerlink&quot; title=&quot;重载&quot;&gt;&lt;/a&gt;重载&lt;/h4&gt;&lt;p&gt;重载我们都很熟悉，就是根据传入的参数的不同进行不同的操作或返回不同的值。&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pickCard&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &amp;#123;suit: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;; card: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;; &amp;#125;[]&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pickCard&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;/span&gt;&amp;#123;suit: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;; card: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pickCard&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;any&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; x == &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pickedCard = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * x.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pickedCard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; x == &lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pickedSuit = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(x / &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; suit: suits[pickedSuit], card: x % &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h3&gt;&lt;p&gt;软件工程的一个重要部分就是开发不仅具有良好设计和一致的 API，而且还可以复用的组件。在 C# 和 Java 中，泛型就是实现可复用组件的重要工具，泛型使组件可以支持一系列的类型而不仅仅是某一种类型。&lt;br&gt;Angular2 的 Component 就是通过泛型实现复用。&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;identify&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;params&quot;&gt;arg: T&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; output = identity&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;myString&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; output = identity(&lt;span class=&quot;string&quot;&gt;&quot;myString&quot;&lt;/span&gt;)           &lt;span class=&quot;comment&quot;&gt;//type 参数可以省略，编译器可以根据传入的参数推断类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;接口泛型&quot;&gt;&lt;a href=&quot;#接口泛型&quot; class=&quot;headerlink&quot; title=&quot;接口泛型&quot;&gt;&lt;/a&gt;接口泛型&lt;/h4&gt;&lt;p&gt;接口泛型可以使所有实现该接口的对象元素保持同一种类型：&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface GenericIdentityFn&amp;lt;&lt;span class=&quot;literal&quot;&gt;T&lt;/span&gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (arg: &lt;span class=&quot;literal&quot;&gt;T&lt;/span&gt;): &lt;span class=&quot;literal&quot;&gt;T&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; identity&amp;lt;&lt;span class=&quot;literal&quot;&gt;T&lt;/span&gt;&amp;gt;(arg: &lt;span class=&quot;literal&quot;&gt;T&lt;/span&gt;): &lt;span class=&quot;literal&quot;&gt;T&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myIdentity: GenericIdentityFn&amp;lt;number&amp;gt; = identity;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;类泛型&quot;&gt;&lt;a href=&quot;#类泛型&quot; class=&quot;headerlink&quot; title=&quot;类泛型&quot;&gt;&lt;/a&gt;类泛型&lt;/h4&gt;&lt;p&gt;和接口泛型一样，类泛型可以确保所有的成员都是同一种类型。但是请注意，泛型只和类的实例部分相关，类的静态部分可以是其他的类型。&lt;/p&gt;
&lt;h4 id=&quot;约束泛型&quot;&gt;&lt;a href=&quot;#约束泛型&quot; class=&quot;headerlink&quot; title=&quot;约束泛型&quot;&gt;&lt;/a&gt;约束泛型&lt;/h4&gt;&lt;p&gt;有时候，我们不仅仅要求组件可以支持所有的类型，还会有其他的限制，比如要求至少有一个 length 属性：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Lengthwise &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length: &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt; identity&amp;lt;T &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; Lengthwise&amp;gt;(arg: T): T &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(arg.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;混合（mixin-）&quot;&gt;&lt;a href=&quot;#混合（mixin-）&quot; class=&quot;headerlink&quot; title=&quot;混合（mixin ）&quot;&gt;&lt;/a&gt;混合（mixin ）&lt;/h3&gt;&lt;p&gt;TypeScript 的 mixin 并不够优雅。在 TypeScript 中，mixin 使用关键字 &lt;code&gt;implements&lt;/code&gt; 而不是 &lt;code&gt;extends&lt;/code&gt;，这意味着类被当成接口来使用，所以只会检查被混合类成员的类型而不是实现，也就是说我们必须在混合后的类中提供类成员的实现。然而这正是我们使用 mixin 想要避免的。&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Disposable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isDisposed: boolean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispose() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.isDisposed = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activatable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isActive: boolean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    activate() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.isActive = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;smartObj&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Disposable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Activatable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.isActive + &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.isDisposed), &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    interact() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.activate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;这里要再写一遍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isDisposed: boolean = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispose: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; void;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isActive: boolean = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    activate: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; void;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;声明合并&quot;&gt;&lt;a href=&quot;#声明合并&quot; class=&quot;headerlink&quot; title=&quot;声明合并&quot;&gt;&lt;/a&gt;声明合并&lt;/h3&gt;&lt;p&gt;在 TypeScript 中，声明无非三种：命名空间/模块，类型，值。&lt;/p&gt;
&lt;h4 id=&quot;合并接口&quot;&gt;&lt;a href=&quot;#合并接口&quot; class=&quot;headerlink&quot; title=&quot;合并接口&quot;&gt;&lt;/a&gt;合并接口&lt;/h4&gt;&lt;p&gt;同名接口合并其成员：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非函数成员必须唯一。&lt;/li&gt;
&lt;li&gt;函数成员视为重载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;合并模块&quot;&gt;&lt;a href=&quot;#合并模块&quot; class=&quot;headerlink&quot; title=&quot;合并模块&quot;&gt;&lt;/a&gt;合并模块&lt;/h4&gt;&lt;p&gt;声明模块会同时创建命名空间和值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名空间的合并： 每个模块中  &lt;code&gt;export&lt;/code&gt; 的类型定义自行合并，组成一个新的命名空间&lt;/li&gt;
&lt;li&gt;值的合并：如果模块已经有同名的值，合并时会把第二个模块中 &lt;code&gt;export&lt;/code&gt; 的值添加到第一个模块中&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 是微软出的一个 JavaScript 超集，给 JavaScript 添加了类型，可以编译成 plain JavaScript。最近开始学习Angular2，Angular2 支持 TypeScript 来编写，也是社区推荐的方式。&lt;/p&gt;
&lt;h3 i
    
    </summary>
    
    
      <category term="angular2" scheme="http://codersir.github.io/tags/angular2/"/>
    
      <category term="typescript" scheme="http://codersir.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>盒模型以及 box-sizing</title>
    <link href="http://codersir.github.io/2015/12/08/box-model-and-box-sizing/"/>
    <id>http://codersir.github.io/2015/12/08/box-model-and-box-sizing/</id>
    <published>2015-12-08T05:14:27.000Z</published>
    <updated>2016-05-29T18:17:32.000Z</updated>
    
    <content type="html">&lt;p&gt;前两天一个准备入前端坑的朋友问我：标准盒模型到底是什么？我不假思索的说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;盒模型有两种，一种是 w3c 标准盒模型，一种是 IE 盒模型。标准盒模型就是 &lt;code&gt;width = content_width + padding_width + border_width&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;朋友立马打断我说道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不对不对，你又把我搞晕了，这不是 IE 盒模型么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我感觉到有点不对劲了，赶紧 Google 了一下，才发现我真的记反了。这让我大吃一惊，这些基本概念我明明都很清楚的，怎么工作一年后居然把这个都弄混了。然后我突然想起了另一个属性：&lt;code&gt;box-sizing:border-box&lt;/code&gt;，我说的盒模型计算公式就是 border-box 啊。自己一直用的 css reset 把 box-sizing 默认设置成 border-box，用的久了慢慢的就忘了它的存在，心想着自己在 chrome 下用的应该是标准的盒模型，就默认把 border-box 当成标准盒模型了。&lt;/p&gt;
&lt;p&gt;先来回顾一下标准盒模型和 IE 盒模型，一图胜千言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/blog/box-model.png&quot; alt=&quot;盒模型&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以标准盒模型是不包括 padding 和 border 的，也就是 &lt;code&gt;width=content_width&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么为什么所有的 reset CSS 的 box-model 都默认是 border-box 呢？因为 border-box 的计算方式&lt;strong&gt;更符合我们的心理预期&lt;/strong&gt;，同时也&lt;strong&gt;更方便计算&lt;/strong&gt;。设想下面这种情况，我们希望内容宽度100%，同时还有 1em 的边框。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是 content-box（内容盒模型），则会出现横向滚动条，这显然不是我们想要的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;zrxEVY&quot; data-default-tab=&quot;result&quot; data-user=&quot;xuhong&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/xuhong/pen/zrxEVY/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;content-box&lt;/a&gt; by 旭鸿 (&lt;a href=&quot;http://codepen.io/xuhong&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@xuhong&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;border-box（边框盒模型）才是我们预期的展现方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;gPbGyG&quot; data-default-tab=&quot;result&quot; data-user=&quot;xuhong&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/xuhong/pen/gPbGyG/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;border-box&lt;/a&gt; by 旭鸿 (&lt;a href=&quot;http://codepen.io/xuhong&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@xuhong&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;通常，最常见的 CSS reset 的 box-sizing 是下面这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-webkit-border-sizing&lt;/span&gt;: border-box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-moz-border-sizing&lt;/span&gt;: border-box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;border-sizing&lt;/span&gt;: border-box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是 CSS-Tricks 提供了&lt;a href=&quot;https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一种更好的 box-sizing reset&lt;/a&gt;，添加了继承，方便覆盖效率更高，同时去掉了浏览器前缀（国外 IE7 及以下已经不用考虑了）：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*, *&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt;, *&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: inherit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一些资料：&lt;/p&gt;
&lt;p&gt;-&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug#Background&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia: Internet Explorer box model bug&lt;/a&gt;&lt;br&gt;-&lt;a href=&quot;http://caniuse.com/#feat=css3-boxsizing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can i use box-sizing&lt;/a&gt;&lt;br&gt;-&lt;a href=&quot;https://css-tricks.com/box-sizing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS-Tricks Box Sizing&lt;/a&gt;&lt;br&gt;-&lt;a href=&quot;https://css-tricks.com/international-box-sizing-awareness-day/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;International box-sizing Awareness Day&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前两天一个准备入前端坑的朋友问我：标准盒模型到底是什么？我不假思索的说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;盒模型有两种，一种是 w3c 标准盒模型，一种是 IE 盒模型。标准盒模型就是 &lt;code&gt;width = content_width + padding_width + border_width&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;朋友立马打断我说道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不对不对，你又把我搞晕了，这不是 IE 盒模型么？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://codersir.github.io/tags/css/"/>
    
  </entry>
  
</feed>
